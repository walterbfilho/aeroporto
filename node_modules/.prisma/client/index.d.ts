
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Aviao
 * 
 */
export type Aviao = $Result.DefaultSelection<Prisma.$AviaoPayload>
/**
 * Model Passageiro
 * 
 */
export type Passageiro = $Result.DefaultSelection<Prisma.$PassageiroPayload>
/**
 * Model Funcionario
 * 
 */
export type Funcionario = $Result.DefaultSelection<Prisma.$FuncionarioPayload>
/**
 * Model Destinos
 * 
 */
export type Destinos = $Result.DefaultSelection<Prisma.$DestinosPayload>
/**
 * Model Voo
 * 
 */
export type Voo = $Result.DefaultSelection<Prisma.$VooPayload>
/**
 * Model Reserva
 * 
 */
export type Reserva = $Result.DefaultSelection<Prisma.$ReservaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Aviaos
 * const aviaos = await prisma.aviao.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Aviaos
   * const aviaos = await prisma.aviao.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.aviao`: Exposes CRUD operations for the **Aviao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aviaos
    * const aviaos = await prisma.aviao.findMany()
    * ```
    */
  get aviao(): Prisma.AviaoDelegate<ExtArgs>;

  /**
   * `prisma.passageiro`: Exposes CRUD operations for the **Passageiro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passageiros
    * const passageiros = await prisma.passageiro.findMany()
    * ```
    */
  get passageiro(): Prisma.PassageiroDelegate<ExtArgs>;

  /**
   * `prisma.funcionario`: Exposes CRUD operations for the **Funcionario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funcionarios
    * const funcionarios = await prisma.funcionario.findMany()
    * ```
    */
  get funcionario(): Prisma.FuncionarioDelegate<ExtArgs>;

  /**
   * `prisma.destinos`: Exposes CRUD operations for the **Destinos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Destinos
    * const destinos = await prisma.destinos.findMany()
    * ```
    */
  get destinos(): Prisma.DestinosDelegate<ExtArgs>;

  /**
   * `prisma.voo`: Exposes CRUD operations for the **Voo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Voos
    * const voos = await prisma.voo.findMany()
    * ```
    */
  get voo(): Prisma.VooDelegate<ExtArgs>;

  /**
   * `prisma.reserva`: Exposes CRUD operations for the **Reserva** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservas
    * const reservas = await prisma.reserva.findMany()
    * ```
    */
  get reserva(): Prisma.ReservaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Aviao: 'Aviao',
    Passageiro: 'Passageiro',
    Funcionario: 'Funcionario',
    Destinos: 'Destinos',
    Voo: 'Voo',
    Reserva: 'Reserva'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'aviao' | 'passageiro' | 'funcionario' | 'destinos' | 'voo' | 'reserva'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Aviao: {
        payload: Prisma.$AviaoPayload<ExtArgs>
        fields: Prisma.AviaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AviaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AviaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>
          }
          findFirst: {
            args: Prisma.AviaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AviaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>
          }
          findMany: {
            args: Prisma.AviaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>[]
          }
          create: {
            args: Prisma.AviaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>
          }
          createMany: {
            args: Prisma.AviaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AviaoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>[]
          }
          delete: {
            args: Prisma.AviaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>
          }
          update: {
            args: Prisma.AviaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>
          }
          deleteMany: {
            args: Prisma.AviaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AviaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AviaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AviaoPayload>
          }
          aggregate: {
            args: Prisma.AviaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAviao>
          }
          groupBy: {
            args: Prisma.AviaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AviaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AviaoCountArgs<ExtArgs>,
            result: $Utils.Optional<AviaoCountAggregateOutputType> | number
          }
        }
      }
      Passageiro: {
        payload: Prisma.$PassageiroPayload<ExtArgs>
        fields: Prisma.PassageiroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassageiroFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassageiroFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>
          }
          findFirst: {
            args: Prisma.PassageiroFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassageiroFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>
          }
          findMany: {
            args: Prisma.PassageiroFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>[]
          }
          create: {
            args: Prisma.PassageiroCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>
          }
          createMany: {
            args: Prisma.PassageiroCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PassageiroCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>[]
          }
          delete: {
            args: Prisma.PassageiroDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>
          }
          update: {
            args: Prisma.PassageiroUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>
          }
          deleteMany: {
            args: Prisma.PassageiroDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PassageiroUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PassageiroUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PassageiroPayload>
          }
          aggregate: {
            args: Prisma.PassageiroAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePassageiro>
          }
          groupBy: {
            args: Prisma.PassageiroGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PassageiroGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassageiroCountArgs<ExtArgs>,
            result: $Utils.Optional<PassageiroCountAggregateOutputType> | number
          }
        }
      }
      Funcionario: {
        payload: Prisma.$FuncionarioPayload<ExtArgs>
        fields: Prisma.FuncionarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FuncionarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FuncionarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          findFirst: {
            args: Prisma.FuncionarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FuncionarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          findMany: {
            args: Prisma.FuncionarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>[]
          }
          create: {
            args: Prisma.FuncionarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          createMany: {
            args: Prisma.FuncionarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FuncionarioCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>[]
          }
          delete: {
            args: Prisma.FuncionarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          update: {
            args: Prisma.FuncionarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          deleteMany: {
            args: Prisma.FuncionarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FuncionarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FuncionarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          aggregate: {
            args: Prisma.FuncionarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFuncionario>
          }
          groupBy: {
            args: Prisma.FuncionarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FuncionarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.FuncionarioCountArgs<ExtArgs>,
            result: $Utils.Optional<FuncionarioCountAggregateOutputType> | number
          }
        }
      }
      Destinos: {
        payload: Prisma.$DestinosPayload<ExtArgs>
        fields: Prisma.DestinosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DestinosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DestinosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>
          }
          findFirst: {
            args: Prisma.DestinosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DestinosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>
          }
          findMany: {
            args: Prisma.DestinosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>[]
          }
          create: {
            args: Prisma.DestinosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>
          }
          createMany: {
            args: Prisma.DestinosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DestinosCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>[]
          }
          delete: {
            args: Prisma.DestinosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>
          }
          update: {
            args: Prisma.DestinosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>
          }
          deleteMany: {
            args: Prisma.DestinosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DestinosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DestinosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DestinosPayload>
          }
          aggregate: {
            args: Prisma.DestinosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDestinos>
          }
          groupBy: {
            args: Prisma.DestinosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DestinosGroupByOutputType>[]
          }
          count: {
            args: Prisma.DestinosCountArgs<ExtArgs>,
            result: $Utils.Optional<DestinosCountAggregateOutputType> | number
          }
        }
      }
      Voo: {
        payload: Prisma.$VooPayload<ExtArgs>
        fields: Prisma.VooFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VooFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VooFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>
          }
          findFirst: {
            args: Prisma.VooFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VooFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>
          }
          findMany: {
            args: Prisma.VooFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>[]
          }
          create: {
            args: Prisma.VooCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>
          }
          createMany: {
            args: Prisma.VooCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VooCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>[]
          }
          delete: {
            args: Prisma.VooDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>
          }
          update: {
            args: Prisma.VooUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>
          }
          deleteMany: {
            args: Prisma.VooDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VooUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VooUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VooPayload>
          }
          aggregate: {
            args: Prisma.VooAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVoo>
          }
          groupBy: {
            args: Prisma.VooGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VooGroupByOutputType>[]
          }
          count: {
            args: Prisma.VooCountArgs<ExtArgs>,
            result: $Utils.Optional<VooCountAggregateOutputType> | number
          }
        }
      }
      Reserva: {
        payload: Prisma.$ReservaPayload<ExtArgs>
        fields: Prisma.ReservaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          findFirst: {
            args: Prisma.ReservaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          findMany: {
            args: Prisma.ReservaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>[]
          }
          create: {
            args: Prisma.ReservaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          createMany: {
            args: Prisma.ReservaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReservaCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>[]
          }
          delete: {
            args: Prisma.ReservaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          update: {
            args: Prisma.ReservaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          deleteMany: {
            args: Prisma.ReservaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReservaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReservaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservaPayload>
          }
          aggregate: {
            args: Prisma.ReservaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReserva>
          }
          groupBy: {
            args: Prisma.ReservaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReservaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservaCountArgs<ExtArgs>,
            result: $Utils.Optional<ReservaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AviaoCountOutputType
   */

  export type AviaoCountOutputType = {
    Funcionarios: number
    Voos: number
  }

  export type AviaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Funcionarios?: boolean | AviaoCountOutputTypeCountFuncionariosArgs
    Voos?: boolean | AviaoCountOutputTypeCountVoosArgs
  }

  // Custom InputTypes
  /**
   * AviaoCountOutputType without action
   */
  export type AviaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AviaoCountOutputType
     */
    select?: AviaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AviaoCountOutputType without action
   */
  export type AviaoCountOutputTypeCountFuncionariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncionarioWhereInput
  }

  /**
   * AviaoCountOutputType without action
   */
  export type AviaoCountOutputTypeCountVoosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VooWhereInput
  }


  /**
   * Count Type PassageiroCountOutputType
   */

  export type PassageiroCountOutputType = {
    Reservas: number
  }

  export type PassageiroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reservas?: boolean | PassageiroCountOutputTypeCountReservasArgs
  }

  // Custom InputTypes
  /**
   * PassageiroCountOutputType without action
   */
  export type PassageiroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassageiroCountOutputType
     */
    select?: PassageiroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PassageiroCountOutputType without action
   */
  export type PassageiroCountOutputTypeCountReservasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservaWhereInput
  }


  /**
   * Count Type DestinosCountOutputType
   */

  export type DestinosCountOutputType = {
    Voos: number
  }

  export type DestinosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Voos?: boolean | DestinosCountOutputTypeCountVoosArgs
  }

  // Custom InputTypes
  /**
   * DestinosCountOutputType without action
   */
  export type DestinosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DestinosCountOutputType
     */
    select?: DestinosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DestinosCountOutputType without action
   */
  export type DestinosCountOutputTypeCountVoosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VooWhereInput
  }


  /**
   * Count Type VooCountOutputType
   */

  export type VooCountOutputType = {
    Reservas: number
  }

  export type VooCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reservas?: boolean | VooCountOutputTypeCountReservasArgs
  }

  // Custom InputTypes
  /**
   * VooCountOutputType without action
   */
  export type VooCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VooCountOutputType
     */
    select?: VooCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VooCountOutputType without action
   */
  export type VooCountOutputTypeCountReservasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Aviao
   */

  export type AggregateAviao = {
    _count: AviaoCountAggregateOutputType | null
    _avg: AviaoAvgAggregateOutputType | null
    _sum: AviaoSumAggregateOutputType | null
    _min: AviaoMinAggregateOutputType | null
    _max: AviaoMaxAggregateOutputType | null
  }

  export type AviaoAvgAggregateOutputType = {
    id: number | null
  }

  export type AviaoSumAggregateOutputType = {
    id: number | null
  }

  export type AviaoMinAggregateOutputType = {
    id: number | null
    modelo: string | null
  }

  export type AviaoMaxAggregateOutputType = {
    id: number | null
    modelo: string | null
  }

  export type AviaoCountAggregateOutputType = {
    id: number
    modelo: number
    _all: number
  }


  export type AviaoAvgAggregateInputType = {
    id?: true
  }

  export type AviaoSumAggregateInputType = {
    id?: true
  }

  export type AviaoMinAggregateInputType = {
    id?: true
    modelo?: true
  }

  export type AviaoMaxAggregateInputType = {
    id?: true
    modelo?: true
  }

  export type AviaoCountAggregateInputType = {
    id?: true
    modelo?: true
    _all?: true
  }

  export type AviaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aviao to aggregate.
     */
    where?: AviaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aviaos to fetch.
     */
    orderBy?: AviaoOrderByWithRelationInput | AviaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AviaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aviaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aviaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aviaos
    **/
    _count?: true | AviaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AviaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AviaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AviaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AviaoMaxAggregateInputType
  }

  export type GetAviaoAggregateType<T extends AviaoAggregateArgs> = {
        [P in keyof T & keyof AggregateAviao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAviao[P]>
      : GetScalarType<T[P], AggregateAviao[P]>
  }




  export type AviaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AviaoWhereInput
    orderBy?: AviaoOrderByWithAggregationInput | AviaoOrderByWithAggregationInput[]
    by: AviaoScalarFieldEnum[] | AviaoScalarFieldEnum
    having?: AviaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AviaoCountAggregateInputType | true
    _avg?: AviaoAvgAggregateInputType
    _sum?: AviaoSumAggregateInputType
    _min?: AviaoMinAggregateInputType
    _max?: AviaoMaxAggregateInputType
  }

  export type AviaoGroupByOutputType = {
    id: number
    modelo: string
    _count: AviaoCountAggregateOutputType | null
    _avg: AviaoAvgAggregateOutputType | null
    _sum: AviaoSumAggregateOutputType | null
    _min: AviaoMinAggregateOutputType | null
    _max: AviaoMaxAggregateOutputType | null
  }

  type GetAviaoGroupByPayload<T extends AviaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AviaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AviaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AviaoGroupByOutputType[P]>
            : GetScalarType<T[P], AviaoGroupByOutputType[P]>
        }
      >
    >


  export type AviaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelo?: boolean
    Funcionarios?: boolean | Aviao$FuncionariosArgs<ExtArgs>
    Voos?: boolean | Aviao$VoosArgs<ExtArgs>
    _count?: boolean | AviaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aviao"]>

  export type AviaoSelectScalar = {
    id?: boolean
    modelo?: boolean
  }


  export type AviaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Funcionarios?: boolean | Aviao$FuncionariosArgs<ExtArgs>
    Voos?: boolean | Aviao$VoosArgs<ExtArgs>
    _count?: boolean | AviaoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AviaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aviao"
    objects: {
      Funcionarios: Prisma.$FuncionarioPayload<ExtArgs>[]
      Voos: Prisma.$VooPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      modelo: string
    }, ExtArgs["result"]["aviao"]>
    composites: {}
  }


  type AviaoGetPayload<S extends boolean | null | undefined | AviaoDefaultArgs> = $Result.GetResult<Prisma.$AviaoPayload, S>

  type AviaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AviaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AviaoCountAggregateInputType | true
    }

  export interface AviaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aviao'], meta: { name: 'Aviao' } }
    /**
     * Find zero or one Aviao that matches the filter.
     * @param {AviaoFindUniqueArgs} args - Arguments to find a Aviao
     * @example
     * // Get one Aviao
     * const aviao = await prisma.aviao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AviaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AviaoFindUniqueArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aviao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AviaoFindUniqueOrThrowArgs} args - Arguments to find a Aviao
     * @example
     * // Get one Aviao
     * const aviao = await prisma.aviao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AviaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AviaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aviao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AviaoFindFirstArgs} args - Arguments to find a Aviao
     * @example
     * // Get one Aviao
     * const aviao = await prisma.aviao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AviaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AviaoFindFirstArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aviao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AviaoFindFirstOrThrowArgs} args - Arguments to find a Aviao
     * @example
     * // Get one Aviao
     * const aviao = await prisma.aviao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AviaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AviaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Aviaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AviaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aviaos
     * const aviaos = await prisma.aviao.findMany()
     * 
     * // Get first 10 Aviaos
     * const aviaos = await prisma.aviao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aviaoWithIdOnly = await prisma.aviao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AviaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AviaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aviao.
     * @param {AviaoCreateArgs} args - Arguments to create a Aviao.
     * @example
     * // Create one Aviao
     * const Aviao = await prisma.aviao.create({
     *   data: {
     *     // ... data to create a Aviao
     *   }
     * })
     * 
    **/
    create<T extends AviaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AviaoCreateArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Aviaos.
     * @param {AviaoCreateManyArgs} args - Arguments to create many Aviaos.
     * @example
     * // Create many Aviaos
     * const aviao = await prisma.aviao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AviaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AviaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Aviaos and returns the data saved in the database.
     * @param {AviaoCreateManyAndReturnArgs} args - Arguments to create many Aviaos.
     * @example
     * // Create many Aviaos
     * const aviao = await prisma.aviao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Aviaos and only return the `id`
     * const aviaoWithIdOnly = await prisma.aviao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends AviaoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, AviaoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Aviao.
     * @param {AviaoDeleteArgs} args - Arguments to delete one Aviao.
     * @example
     * // Delete one Aviao
     * const Aviao = await prisma.aviao.delete({
     *   where: {
     *     // ... filter to delete one Aviao
     *   }
     * })
     * 
    **/
    delete<T extends AviaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AviaoDeleteArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aviao.
     * @param {AviaoUpdateArgs} args - Arguments to update one Aviao.
     * @example
     * // Update one Aviao
     * const aviao = await prisma.aviao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AviaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AviaoUpdateArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Aviaos.
     * @param {AviaoDeleteManyArgs} args - Arguments to filter Aviaos to delete.
     * @example
     * // Delete a few Aviaos
     * const { count } = await prisma.aviao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AviaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AviaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aviaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AviaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aviaos
     * const aviao = await prisma.aviao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AviaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AviaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aviao.
     * @param {AviaoUpsertArgs} args - Arguments to update or create a Aviao.
     * @example
     * // Update or create a Aviao
     * const aviao = await prisma.aviao.upsert({
     *   create: {
     *     // ... data to create a Aviao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aviao we want to update
     *   }
     * })
    **/
    upsert<T extends AviaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AviaoUpsertArgs<ExtArgs>>
    ): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Aviaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AviaoCountArgs} args - Arguments to filter Aviaos to count.
     * @example
     * // Count the number of Aviaos
     * const count = await prisma.aviao.count({
     *   where: {
     *     // ... the filter for the Aviaos we want to count
     *   }
     * })
    **/
    count<T extends AviaoCountArgs>(
      args?: Subset<T, AviaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AviaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aviao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AviaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AviaoAggregateArgs>(args: Subset<T, AviaoAggregateArgs>): Prisma.PrismaPromise<GetAviaoAggregateType<T>>

    /**
     * Group by Aviao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AviaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AviaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AviaoGroupByArgs['orderBy'] }
        : { orderBy?: AviaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AviaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAviaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aviao model
   */
  readonly fields: AviaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aviao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AviaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Funcionarios<T extends Aviao$FuncionariosArgs<ExtArgs> = {}>(args?: Subset<T, Aviao$FuncionariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    Voos<T extends Aviao$VoosArgs<ExtArgs> = {}>(args?: Subset<T, Aviao$VoosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aviao model
   */ 
  interface AviaoFieldRefs {
    readonly id: FieldRef<"Aviao", 'Int'>
    readonly modelo: FieldRef<"Aviao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Aviao findUnique
   */
  export type AviaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * Filter, which Aviao to fetch.
     */
    where: AviaoWhereUniqueInput
  }

  /**
   * Aviao findUniqueOrThrow
   */
  export type AviaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * Filter, which Aviao to fetch.
     */
    where: AviaoWhereUniqueInput
  }

  /**
   * Aviao findFirst
   */
  export type AviaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * Filter, which Aviao to fetch.
     */
    where?: AviaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aviaos to fetch.
     */
    orderBy?: AviaoOrderByWithRelationInput | AviaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aviaos.
     */
    cursor?: AviaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aviaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aviaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aviaos.
     */
    distinct?: AviaoScalarFieldEnum | AviaoScalarFieldEnum[]
  }

  /**
   * Aviao findFirstOrThrow
   */
  export type AviaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * Filter, which Aviao to fetch.
     */
    where?: AviaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aviaos to fetch.
     */
    orderBy?: AviaoOrderByWithRelationInput | AviaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aviaos.
     */
    cursor?: AviaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aviaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aviaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aviaos.
     */
    distinct?: AviaoScalarFieldEnum | AviaoScalarFieldEnum[]
  }

  /**
   * Aviao findMany
   */
  export type AviaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * Filter, which Aviaos to fetch.
     */
    where?: AviaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aviaos to fetch.
     */
    orderBy?: AviaoOrderByWithRelationInput | AviaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aviaos.
     */
    cursor?: AviaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aviaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aviaos.
     */
    skip?: number
    distinct?: AviaoScalarFieldEnum | AviaoScalarFieldEnum[]
  }

  /**
   * Aviao create
   */
  export type AviaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Aviao.
     */
    data: XOR<AviaoCreateInput, AviaoUncheckedCreateInput>
  }

  /**
   * Aviao createMany
   */
  export type AviaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aviaos.
     */
    data: AviaoCreateManyInput | AviaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Aviao createManyAndReturn
   */
  export type AviaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * The data used to create many Aviaos.
     */
    data: AviaoCreateManyInput | AviaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Aviao update
   */
  export type AviaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Aviao.
     */
    data: XOR<AviaoUpdateInput, AviaoUncheckedUpdateInput>
    /**
     * Choose, which Aviao to update.
     */
    where: AviaoWhereUniqueInput
  }

  /**
   * Aviao updateMany
   */
  export type AviaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aviaos.
     */
    data: XOR<AviaoUpdateManyMutationInput, AviaoUncheckedUpdateManyInput>
    /**
     * Filter which Aviaos to update
     */
    where?: AviaoWhereInput
  }

  /**
   * Aviao upsert
   */
  export type AviaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Aviao to update in case it exists.
     */
    where: AviaoWhereUniqueInput
    /**
     * In case the Aviao found by the `where` argument doesn't exist, create a new Aviao with this data.
     */
    create: XOR<AviaoCreateInput, AviaoUncheckedCreateInput>
    /**
     * In case the Aviao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AviaoUpdateInput, AviaoUncheckedUpdateInput>
  }

  /**
   * Aviao delete
   */
  export type AviaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
    /**
     * Filter which Aviao to delete.
     */
    where: AviaoWhereUniqueInput
  }

  /**
   * Aviao deleteMany
   */
  export type AviaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aviaos to delete
     */
    where?: AviaoWhereInput
  }

  /**
   * Aviao.Funcionarios
   */
  export type Aviao$FuncionariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    where?: FuncionarioWhereInput
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    cursor?: FuncionarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Aviao.Voos
   */
  export type Aviao$VoosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    where?: VooWhereInput
    orderBy?: VooOrderByWithRelationInput | VooOrderByWithRelationInput[]
    cursor?: VooWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VooScalarFieldEnum | VooScalarFieldEnum[]
  }

  /**
   * Aviao without action
   */
  export type AviaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aviao
     */
    select?: AviaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AviaoInclude<ExtArgs> | null
  }


  /**
   * Model Passageiro
   */

  export type AggregatePassageiro = {
    _count: PassageiroCountAggregateOutputType | null
    _min: PassageiroMinAggregateOutputType | null
    _max: PassageiroMaxAggregateOutputType | null
  }

  export type PassageiroMinAggregateOutputType = {
    cpf: string | null
    Nome: string | null
  }

  export type PassageiroMaxAggregateOutputType = {
    cpf: string | null
    Nome: string | null
  }

  export type PassageiroCountAggregateOutputType = {
    cpf: number
    Nome: number
    _all: number
  }


  export type PassageiroMinAggregateInputType = {
    cpf?: true
    Nome?: true
  }

  export type PassageiroMaxAggregateInputType = {
    cpf?: true
    Nome?: true
  }

  export type PassageiroCountAggregateInputType = {
    cpf?: true
    Nome?: true
    _all?: true
  }

  export type PassageiroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passageiro to aggregate.
     */
    where?: PassageiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passageiros to fetch.
     */
    orderBy?: PassageiroOrderByWithRelationInput | PassageiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassageiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passageiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passageiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Passageiros
    **/
    _count?: true | PassageiroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassageiroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassageiroMaxAggregateInputType
  }

  export type GetPassageiroAggregateType<T extends PassageiroAggregateArgs> = {
        [P in keyof T & keyof AggregatePassageiro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassageiro[P]>
      : GetScalarType<T[P], AggregatePassageiro[P]>
  }




  export type PassageiroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassageiroWhereInput
    orderBy?: PassageiroOrderByWithAggregationInput | PassageiroOrderByWithAggregationInput[]
    by: PassageiroScalarFieldEnum[] | PassageiroScalarFieldEnum
    having?: PassageiroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassageiroCountAggregateInputType | true
    _min?: PassageiroMinAggregateInputType
    _max?: PassageiroMaxAggregateInputType
  }

  export type PassageiroGroupByOutputType = {
    cpf: string
    Nome: string
    _count: PassageiroCountAggregateOutputType | null
    _min: PassageiroMinAggregateOutputType | null
    _max: PassageiroMaxAggregateOutputType | null
  }

  type GetPassageiroGroupByPayload<T extends PassageiroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassageiroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassageiroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassageiroGroupByOutputType[P]>
            : GetScalarType<T[P], PassageiroGroupByOutputType[P]>
        }
      >
    >


  export type PassageiroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cpf?: boolean
    Nome?: boolean
    Reservas?: boolean | Passageiro$ReservasArgs<ExtArgs>
    _count?: boolean | PassageiroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passageiro"]>

  export type PassageiroSelectScalar = {
    cpf?: boolean
    Nome?: boolean
  }


  export type PassageiroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Reservas?: boolean | Passageiro$ReservasArgs<ExtArgs>
    _count?: boolean | PassageiroCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PassageiroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Passageiro"
    objects: {
      Reservas: Prisma.$ReservaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      cpf: string
      Nome: string
    }, ExtArgs["result"]["passageiro"]>
    composites: {}
  }


  type PassageiroGetPayload<S extends boolean | null | undefined | PassageiroDefaultArgs> = $Result.GetResult<Prisma.$PassageiroPayload, S>

  type PassageiroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PassageiroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PassageiroCountAggregateInputType | true
    }

  export interface PassageiroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Passageiro'], meta: { name: 'Passageiro' } }
    /**
     * Find zero or one Passageiro that matches the filter.
     * @param {PassageiroFindUniqueArgs} args - Arguments to find a Passageiro
     * @example
     * // Get one Passageiro
     * const passageiro = await prisma.passageiro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PassageiroFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PassageiroFindUniqueArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Passageiro that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PassageiroFindUniqueOrThrowArgs} args - Arguments to find a Passageiro
     * @example
     * // Get one Passageiro
     * const passageiro = await prisma.passageiro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PassageiroFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageiroFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Passageiro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageiroFindFirstArgs} args - Arguments to find a Passageiro
     * @example
     * // Get one Passageiro
     * const passageiro = await prisma.passageiro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PassageiroFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageiroFindFirstArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Passageiro that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageiroFindFirstOrThrowArgs} args - Arguments to find a Passageiro
     * @example
     * // Get one Passageiro
     * const passageiro = await prisma.passageiro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PassageiroFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageiroFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Passageiros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageiroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passageiros
     * const passageiros = await prisma.passageiro.findMany()
     * 
     * // Get first 10 Passageiros
     * const passageiros = await prisma.passageiro.findMany({ take: 10 })
     * 
     * // Only select the `cpf`
     * const passageiroWithCpfOnly = await prisma.passageiro.findMany({ select: { cpf: true } })
     * 
    **/
    findMany<T extends PassageiroFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageiroFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Passageiro.
     * @param {PassageiroCreateArgs} args - Arguments to create a Passageiro.
     * @example
     * // Create one Passageiro
     * const Passageiro = await prisma.passageiro.create({
     *   data: {
     *     // ... data to create a Passageiro
     *   }
     * })
     * 
    **/
    create<T extends PassageiroCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageiroCreateArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Passageiros.
     * @param {PassageiroCreateManyArgs} args - Arguments to create many Passageiros.
     * @example
     * // Create many Passageiros
     * const passageiro = await prisma.passageiro.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PassageiroCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageiroCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Passageiros and returns the data saved in the database.
     * @param {PassageiroCreateManyAndReturnArgs} args - Arguments to create many Passageiros.
     * @example
     * // Create many Passageiros
     * const passageiro = await prisma.passageiro.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Passageiros and only return the `cpf`
     * const passageiroWithCpfOnly = await prisma.passageiro.createManyAndReturn({ 
     *   select: { cpf: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PassageiroCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageiroCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Passageiro.
     * @param {PassageiroDeleteArgs} args - Arguments to delete one Passageiro.
     * @example
     * // Delete one Passageiro
     * const Passageiro = await prisma.passageiro.delete({
     *   where: {
     *     // ... filter to delete one Passageiro
     *   }
     * })
     * 
    **/
    delete<T extends PassageiroDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PassageiroDeleteArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Passageiro.
     * @param {PassageiroUpdateArgs} args - Arguments to update one Passageiro.
     * @example
     * // Update one Passageiro
     * const passageiro = await prisma.passageiro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PassageiroUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PassageiroUpdateArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Passageiros.
     * @param {PassageiroDeleteManyArgs} args - Arguments to filter Passageiros to delete.
     * @example
     * // Delete a few Passageiros
     * const { count } = await prisma.passageiro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PassageiroDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PassageiroDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passageiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageiroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passageiros
     * const passageiro = await prisma.passageiro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PassageiroUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PassageiroUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Passageiro.
     * @param {PassageiroUpsertArgs} args - Arguments to update or create a Passageiro.
     * @example
     * // Update or create a Passageiro
     * const passageiro = await prisma.passageiro.upsert({
     *   create: {
     *     // ... data to create a Passageiro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Passageiro we want to update
     *   }
     * })
    **/
    upsert<T extends PassageiroUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PassageiroUpsertArgs<ExtArgs>>
    ): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Passageiros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageiroCountArgs} args - Arguments to filter Passageiros to count.
     * @example
     * // Count the number of Passageiros
     * const count = await prisma.passageiro.count({
     *   where: {
     *     // ... the filter for the Passageiros we want to count
     *   }
     * })
    **/
    count<T extends PassageiroCountArgs>(
      args?: Subset<T, PassageiroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassageiroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Passageiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageiroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassageiroAggregateArgs>(args: Subset<T, PassageiroAggregateArgs>): Prisma.PrismaPromise<GetPassageiroAggregateType<T>>

    /**
     * Group by Passageiro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassageiroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassageiroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassageiroGroupByArgs['orderBy'] }
        : { orderBy?: PassageiroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassageiroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassageiroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Passageiro model
   */
  readonly fields: PassageiroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Passageiro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassageiroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Reservas<T extends Passageiro$ReservasArgs<ExtArgs> = {}>(args?: Subset<T, Passageiro$ReservasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Passageiro model
   */ 
  interface PassageiroFieldRefs {
    readonly cpf: FieldRef<"Passageiro", 'String'>
    readonly Nome: FieldRef<"Passageiro", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Passageiro findUnique
   */
  export type PassageiroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * Filter, which Passageiro to fetch.
     */
    where: PassageiroWhereUniqueInput
  }

  /**
   * Passageiro findUniqueOrThrow
   */
  export type PassageiroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * Filter, which Passageiro to fetch.
     */
    where: PassageiroWhereUniqueInput
  }

  /**
   * Passageiro findFirst
   */
  export type PassageiroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * Filter, which Passageiro to fetch.
     */
    where?: PassageiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passageiros to fetch.
     */
    orderBy?: PassageiroOrderByWithRelationInput | PassageiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passageiros.
     */
    cursor?: PassageiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passageiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passageiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passageiros.
     */
    distinct?: PassageiroScalarFieldEnum | PassageiroScalarFieldEnum[]
  }

  /**
   * Passageiro findFirstOrThrow
   */
  export type PassageiroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * Filter, which Passageiro to fetch.
     */
    where?: PassageiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passageiros to fetch.
     */
    orderBy?: PassageiroOrderByWithRelationInput | PassageiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passageiros.
     */
    cursor?: PassageiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passageiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passageiros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passageiros.
     */
    distinct?: PassageiroScalarFieldEnum | PassageiroScalarFieldEnum[]
  }

  /**
   * Passageiro findMany
   */
  export type PassageiroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * Filter, which Passageiros to fetch.
     */
    where?: PassageiroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passageiros to fetch.
     */
    orderBy?: PassageiroOrderByWithRelationInput | PassageiroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Passageiros.
     */
    cursor?: PassageiroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passageiros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passageiros.
     */
    skip?: number
    distinct?: PassageiroScalarFieldEnum | PassageiroScalarFieldEnum[]
  }

  /**
   * Passageiro create
   */
  export type PassageiroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * The data needed to create a Passageiro.
     */
    data: XOR<PassageiroCreateInput, PassageiroUncheckedCreateInput>
  }

  /**
   * Passageiro createMany
   */
  export type PassageiroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Passageiros.
     */
    data: PassageiroCreateManyInput | PassageiroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Passageiro createManyAndReturn
   */
  export type PassageiroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * The data used to create many Passageiros.
     */
    data: PassageiroCreateManyInput | PassageiroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Passageiro update
   */
  export type PassageiroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * The data needed to update a Passageiro.
     */
    data: XOR<PassageiroUpdateInput, PassageiroUncheckedUpdateInput>
    /**
     * Choose, which Passageiro to update.
     */
    where: PassageiroWhereUniqueInput
  }

  /**
   * Passageiro updateMany
   */
  export type PassageiroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Passageiros.
     */
    data: XOR<PassageiroUpdateManyMutationInput, PassageiroUncheckedUpdateManyInput>
    /**
     * Filter which Passageiros to update
     */
    where?: PassageiroWhereInput
  }

  /**
   * Passageiro upsert
   */
  export type PassageiroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * The filter to search for the Passageiro to update in case it exists.
     */
    where: PassageiroWhereUniqueInput
    /**
     * In case the Passageiro found by the `where` argument doesn't exist, create a new Passageiro with this data.
     */
    create: XOR<PassageiroCreateInput, PassageiroUncheckedCreateInput>
    /**
     * In case the Passageiro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassageiroUpdateInput, PassageiroUncheckedUpdateInput>
  }

  /**
   * Passageiro delete
   */
  export type PassageiroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
    /**
     * Filter which Passageiro to delete.
     */
    where: PassageiroWhereUniqueInput
  }

  /**
   * Passageiro deleteMany
   */
  export type PassageiroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passageiros to delete
     */
    where?: PassageiroWhereInput
  }

  /**
   * Passageiro.Reservas
   */
  export type Passageiro$ReservasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    where?: ReservaWhereInput
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    cursor?: ReservaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * Passageiro without action
   */
  export type PassageiroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Passageiro
     */
    select?: PassageiroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassageiroInclude<ExtArgs> | null
  }


  /**
   * Model Funcionario
   */

  export type AggregateFuncionario = {
    _count: FuncionarioCountAggregateOutputType | null
    _avg: FuncionarioAvgAggregateOutputType | null
    _sum: FuncionarioSumAggregateOutputType | null
    _min: FuncionarioMinAggregateOutputType | null
    _max: FuncionarioMaxAggregateOutputType | null
  }

  export type FuncionarioAvgAggregateOutputType = {
    fk_Aviao_id: number | null
  }

  export type FuncionarioSumAggregateOutputType = {
    fk_Aviao_id: number | null
  }

  export type FuncionarioMinAggregateOutputType = {
    cpf: string | null
    Nome: string | null
    cargo: string | null
    fk_Aviao_id: number | null
  }

  export type FuncionarioMaxAggregateOutputType = {
    cpf: string | null
    Nome: string | null
    cargo: string | null
    fk_Aviao_id: number | null
  }

  export type FuncionarioCountAggregateOutputType = {
    cpf: number
    Nome: number
    cargo: number
    fk_Aviao_id: number
    _all: number
  }


  export type FuncionarioAvgAggregateInputType = {
    fk_Aviao_id?: true
  }

  export type FuncionarioSumAggregateInputType = {
    fk_Aviao_id?: true
  }

  export type FuncionarioMinAggregateInputType = {
    cpf?: true
    Nome?: true
    cargo?: true
    fk_Aviao_id?: true
  }

  export type FuncionarioMaxAggregateInputType = {
    cpf?: true
    Nome?: true
    cargo?: true
    fk_Aviao_id?: true
  }

  export type FuncionarioCountAggregateInputType = {
    cpf?: true
    Nome?: true
    cargo?: true
    fk_Aviao_id?: true
    _all?: true
  }

  export type FuncionarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcionario to aggregate.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funcionarios
    **/
    _count?: true | FuncionarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuncionarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuncionarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuncionarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuncionarioMaxAggregateInputType
  }

  export type GetFuncionarioAggregateType<T extends FuncionarioAggregateArgs> = {
        [P in keyof T & keyof AggregateFuncionario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuncionario[P]>
      : GetScalarType<T[P], AggregateFuncionario[P]>
  }




  export type FuncionarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncionarioWhereInput
    orderBy?: FuncionarioOrderByWithAggregationInput | FuncionarioOrderByWithAggregationInput[]
    by: FuncionarioScalarFieldEnum[] | FuncionarioScalarFieldEnum
    having?: FuncionarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuncionarioCountAggregateInputType | true
    _avg?: FuncionarioAvgAggregateInputType
    _sum?: FuncionarioSumAggregateInputType
    _min?: FuncionarioMinAggregateInputType
    _max?: FuncionarioMaxAggregateInputType
  }

  export type FuncionarioGroupByOutputType = {
    cpf: string
    Nome: string
    cargo: string
    fk_Aviao_id: number
    _count: FuncionarioCountAggregateOutputType | null
    _avg: FuncionarioAvgAggregateOutputType | null
    _sum: FuncionarioSumAggregateOutputType | null
    _min: FuncionarioMinAggregateOutputType | null
    _max: FuncionarioMaxAggregateOutputType | null
  }

  type GetFuncionarioGroupByPayload<T extends FuncionarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FuncionarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuncionarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuncionarioGroupByOutputType[P]>
            : GetScalarType<T[P], FuncionarioGroupByOutputType[P]>
        }
      >
    >


  export type FuncionarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cpf?: boolean
    Nome?: boolean
    cargo?: boolean
    fk_Aviao_id?: boolean
    Aviao?: boolean | AviaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["funcionario"]>

  export type FuncionarioSelectScalar = {
    cpf?: boolean
    Nome?: boolean
    cargo?: boolean
    fk_Aviao_id?: boolean
  }


  export type FuncionarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Aviao?: boolean | AviaoDefaultArgs<ExtArgs>
  }


  export type $FuncionarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Funcionario"
    objects: {
      Aviao: Prisma.$AviaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cpf: string
      Nome: string
      cargo: string
      fk_Aviao_id: number
    }, ExtArgs["result"]["funcionario"]>
    composites: {}
  }


  type FuncionarioGetPayload<S extends boolean | null | undefined | FuncionarioDefaultArgs> = $Result.GetResult<Prisma.$FuncionarioPayload, S>

  type FuncionarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FuncionarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FuncionarioCountAggregateInputType | true
    }

  export interface FuncionarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Funcionario'], meta: { name: 'Funcionario' } }
    /**
     * Find zero or one Funcionario that matches the filter.
     * @param {FuncionarioFindUniqueArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FuncionarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionarioFindUniqueArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Funcionario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FuncionarioFindUniqueOrThrowArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FuncionarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Funcionario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindFirstArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FuncionarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionarioFindFirstArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Funcionario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindFirstOrThrowArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FuncionarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Funcionarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funcionarios
     * const funcionarios = await prisma.funcionario.findMany()
     * 
     * // Get first 10 Funcionarios
     * const funcionarios = await prisma.funcionario.findMany({ take: 10 })
     * 
     * // Only select the `cpf`
     * const funcionarioWithCpfOnly = await prisma.funcionario.findMany({ select: { cpf: true } })
     * 
    **/
    findMany<T extends FuncionarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Funcionario.
     * @param {FuncionarioCreateArgs} args - Arguments to create a Funcionario.
     * @example
     * // Create one Funcionario
     * const Funcionario = await prisma.funcionario.create({
     *   data: {
     *     // ... data to create a Funcionario
     *   }
     * })
     * 
    **/
    create<T extends FuncionarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionarioCreateArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Funcionarios.
     * @param {FuncionarioCreateManyArgs} args - Arguments to create many Funcionarios.
     * @example
     * // Create many Funcionarios
     * const funcionario = await prisma.funcionario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends FuncionarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Funcionarios and returns the data saved in the database.
     * @param {FuncionarioCreateManyAndReturnArgs} args - Arguments to create many Funcionarios.
     * @example
     * // Create many Funcionarios
     * const funcionario = await prisma.funcionario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Funcionarios and only return the `cpf`
     * const funcionarioWithCpfOnly = await prisma.funcionario.createManyAndReturn({ 
     *   select: { cpf: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends FuncionarioCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionarioCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Funcionario.
     * @param {FuncionarioDeleteArgs} args - Arguments to delete one Funcionario.
     * @example
     * // Delete one Funcionario
     * const Funcionario = await prisma.funcionario.delete({
     *   where: {
     *     // ... filter to delete one Funcionario
     *   }
     * })
     * 
    **/
    delete<T extends FuncionarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionarioDeleteArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Funcionario.
     * @param {FuncionarioUpdateArgs} args - Arguments to update one Funcionario.
     * @example
     * // Update one Funcionario
     * const funcionario = await prisma.funcionario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FuncionarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionarioUpdateArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Funcionarios.
     * @param {FuncionarioDeleteManyArgs} args - Arguments to filter Funcionarios to delete.
     * @example
     * // Delete a few Funcionarios
     * const { count } = await prisma.funcionario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FuncionarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funcionarios
     * const funcionario = await prisma.funcionario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FuncionarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Funcionario.
     * @param {FuncionarioUpsertArgs} args - Arguments to update or create a Funcionario.
     * @example
     * // Update or create a Funcionario
     * const funcionario = await prisma.funcionario.upsert({
     *   create: {
     *     // ... data to create a Funcionario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funcionario we want to update
     *   }
     * })
    **/
    upsert<T extends FuncionarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionarioUpsertArgs<ExtArgs>>
    ): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioCountArgs} args - Arguments to filter Funcionarios to count.
     * @example
     * // Count the number of Funcionarios
     * const count = await prisma.funcionario.count({
     *   where: {
     *     // ... the filter for the Funcionarios we want to count
     *   }
     * })
    **/
    count<T extends FuncionarioCountArgs>(
      args?: Subset<T, FuncionarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuncionarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funcionario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuncionarioAggregateArgs>(args: Subset<T, FuncionarioAggregateArgs>): Prisma.PrismaPromise<GetFuncionarioAggregateType<T>>

    /**
     * Group by Funcionario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuncionarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuncionarioGroupByArgs['orderBy'] }
        : { orderBy?: FuncionarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuncionarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncionarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Funcionario model
   */
  readonly fields: FuncionarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Funcionario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FuncionarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Aviao<T extends AviaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AviaoDefaultArgs<ExtArgs>>): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Funcionario model
   */ 
  interface FuncionarioFieldRefs {
    readonly cpf: FieldRef<"Funcionario", 'String'>
    readonly Nome: FieldRef<"Funcionario", 'String'>
    readonly cargo: FieldRef<"Funcionario", 'String'>
    readonly fk_Aviao_id: FieldRef<"Funcionario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Funcionario findUnique
   */
  export type FuncionarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario findUniqueOrThrow
   */
  export type FuncionarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario findFirst
   */
  export type FuncionarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     */
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Funcionario findFirstOrThrow
   */
  export type FuncionarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     */
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Funcionario findMany
   */
  export type FuncionarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionarios to fetch.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funcionarios.
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Funcionario create
   */
  export type FuncionarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Funcionario.
     */
    data: XOR<FuncionarioCreateInput, FuncionarioUncheckedCreateInput>
  }

  /**
   * Funcionario createMany
   */
  export type FuncionarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funcionarios.
     */
    data: FuncionarioCreateManyInput | FuncionarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Funcionario createManyAndReturn
   */
  export type FuncionarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * The data used to create many Funcionarios.
     */
    data: FuncionarioCreateManyInput | FuncionarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Funcionario update
   */
  export type FuncionarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Funcionario.
     */
    data: XOR<FuncionarioUpdateInput, FuncionarioUncheckedUpdateInput>
    /**
     * Choose, which Funcionario to update.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario updateMany
   */
  export type FuncionarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funcionarios.
     */
    data: XOR<FuncionarioUpdateManyMutationInput, FuncionarioUncheckedUpdateManyInput>
    /**
     * Filter which Funcionarios to update
     */
    where?: FuncionarioWhereInput
  }

  /**
   * Funcionario upsert
   */
  export type FuncionarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Funcionario to update in case it exists.
     */
    where: FuncionarioWhereUniqueInput
    /**
     * In case the Funcionario found by the `where` argument doesn't exist, create a new Funcionario with this data.
     */
    create: XOR<FuncionarioCreateInput, FuncionarioUncheckedCreateInput>
    /**
     * In case the Funcionario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FuncionarioUpdateInput, FuncionarioUncheckedUpdateInput>
  }

  /**
   * Funcionario delete
   */
  export type FuncionarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter which Funcionario to delete.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario deleteMany
   */
  export type FuncionarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcionarios to delete
     */
    where?: FuncionarioWhereInput
  }

  /**
   * Funcionario without action
   */
  export type FuncionarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
  }


  /**
   * Model Destinos
   */

  export type AggregateDestinos = {
    _count: DestinosCountAggregateOutputType | null
    _avg: DestinosAvgAggregateOutputType | null
    _sum: DestinosSumAggregateOutputType | null
    _min: DestinosMinAggregateOutputType | null
    _max: DestinosMaxAggregateOutputType | null
  }

  export type DestinosAvgAggregateOutputType = {
    id: number | null
  }

  export type DestinosSumAggregateOutputType = {
    id: number | null
  }

  export type DestinosMinAggregateOutputType = {
    id: number | null
    local: string | null
  }

  export type DestinosMaxAggregateOutputType = {
    id: number | null
    local: string | null
  }

  export type DestinosCountAggregateOutputType = {
    id: number
    local: number
    _all: number
  }


  export type DestinosAvgAggregateInputType = {
    id?: true
  }

  export type DestinosSumAggregateInputType = {
    id?: true
  }

  export type DestinosMinAggregateInputType = {
    id?: true
    local?: true
  }

  export type DestinosMaxAggregateInputType = {
    id?: true
    local?: true
  }

  export type DestinosCountAggregateInputType = {
    id?: true
    local?: true
    _all?: true
  }

  export type DestinosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Destinos to aggregate.
     */
    where?: DestinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinos to fetch.
     */
    orderBy?: DestinosOrderByWithRelationInput | DestinosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DestinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Destinos
    **/
    _count?: true | DestinosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DestinosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DestinosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DestinosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DestinosMaxAggregateInputType
  }

  export type GetDestinosAggregateType<T extends DestinosAggregateArgs> = {
        [P in keyof T & keyof AggregateDestinos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDestinos[P]>
      : GetScalarType<T[P], AggregateDestinos[P]>
  }




  export type DestinosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DestinosWhereInput
    orderBy?: DestinosOrderByWithAggregationInput | DestinosOrderByWithAggregationInput[]
    by: DestinosScalarFieldEnum[] | DestinosScalarFieldEnum
    having?: DestinosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DestinosCountAggregateInputType | true
    _avg?: DestinosAvgAggregateInputType
    _sum?: DestinosSumAggregateInputType
    _min?: DestinosMinAggregateInputType
    _max?: DestinosMaxAggregateInputType
  }

  export type DestinosGroupByOutputType = {
    id: number
    local: string
    _count: DestinosCountAggregateOutputType | null
    _avg: DestinosAvgAggregateOutputType | null
    _sum: DestinosSumAggregateOutputType | null
    _min: DestinosMinAggregateOutputType | null
    _max: DestinosMaxAggregateOutputType | null
  }

  type GetDestinosGroupByPayload<T extends DestinosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DestinosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DestinosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DestinosGroupByOutputType[P]>
            : GetScalarType<T[P], DestinosGroupByOutputType[P]>
        }
      >
    >


  export type DestinosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    local?: boolean
    Voos?: boolean | Destinos$VoosArgs<ExtArgs>
    _count?: boolean | DestinosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["destinos"]>

  export type DestinosSelectScalar = {
    id?: boolean
    local?: boolean
  }


  export type DestinosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Voos?: boolean | Destinos$VoosArgs<ExtArgs>
    _count?: boolean | DestinosCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DestinosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Destinos"
    objects: {
      Voos: Prisma.$VooPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      local: string
    }, ExtArgs["result"]["destinos"]>
    composites: {}
  }


  type DestinosGetPayload<S extends boolean | null | undefined | DestinosDefaultArgs> = $Result.GetResult<Prisma.$DestinosPayload, S>

  type DestinosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DestinosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DestinosCountAggregateInputType | true
    }

  export interface DestinosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Destinos'], meta: { name: 'Destinos' } }
    /**
     * Find zero or one Destinos that matches the filter.
     * @param {DestinosFindUniqueArgs} args - Arguments to find a Destinos
     * @example
     * // Get one Destinos
     * const destinos = await prisma.destinos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DestinosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DestinosFindUniqueArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Destinos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DestinosFindUniqueOrThrowArgs} args - Arguments to find a Destinos
     * @example
     * // Get one Destinos
     * const destinos = await prisma.destinos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DestinosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DestinosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Destinos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinosFindFirstArgs} args - Arguments to find a Destinos
     * @example
     * // Get one Destinos
     * const destinos = await prisma.destinos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DestinosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DestinosFindFirstArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Destinos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinosFindFirstOrThrowArgs} args - Arguments to find a Destinos
     * @example
     * // Get one Destinos
     * const destinos = await prisma.destinos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DestinosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DestinosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Destinos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Destinos
     * const destinos = await prisma.destinos.findMany()
     * 
     * // Get first 10 Destinos
     * const destinos = await prisma.destinos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const destinosWithIdOnly = await prisma.destinos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DestinosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DestinosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Destinos.
     * @param {DestinosCreateArgs} args - Arguments to create a Destinos.
     * @example
     * // Create one Destinos
     * const Destinos = await prisma.destinos.create({
     *   data: {
     *     // ... data to create a Destinos
     *   }
     * })
     * 
    **/
    create<T extends DestinosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DestinosCreateArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Destinos.
     * @param {DestinosCreateManyArgs} args - Arguments to create many Destinos.
     * @example
     * // Create many Destinos
     * const destinos = await prisma.destinos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DestinosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DestinosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Destinos and returns the data saved in the database.
     * @param {DestinosCreateManyAndReturnArgs} args - Arguments to create many Destinos.
     * @example
     * // Create many Destinos
     * const destinos = await prisma.destinos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Destinos and only return the `id`
     * const destinosWithIdOnly = await prisma.destinos.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends DestinosCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, DestinosCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Destinos.
     * @param {DestinosDeleteArgs} args - Arguments to delete one Destinos.
     * @example
     * // Delete one Destinos
     * const Destinos = await prisma.destinos.delete({
     *   where: {
     *     // ... filter to delete one Destinos
     *   }
     * })
     * 
    **/
    delete<T extends DestinosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DestinosDeleteArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Destinos.
     * @param {DestinosUpdateArgs} args - Arguments to update one Destinos.
     * @example
     * // Update one Destinos
     * const destinos = await prisma.destinos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DestinosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DestinosUpdateArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Destinos.
     * @param {DestinosDeleteManyArgs} args - Arguments to filter Destinos to delete.
     * @example
     * // Delete a few Destinos
     * const { count } = await prisma.destinos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DestinosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DestinosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Destinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Destinos
     * const destinos = await prisma.destinos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DestinosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DestinosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Destinos.
     * @param {DestinosUpsertArgs} args - Arguments to update or create a Destinos.
     * @example
     * // Update or create a Destinos
     * const destinos = await prisma.destinos.upsert({
     *   create: {
     *     // ... data to create a Destinos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Destinos we want to update
     *   }
     * })
    **/
    upsert<T extends DestinosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DestinosUpsertArgs<ExtArgs>>
    ): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Destinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinosCountArgs} args - Arguments to filter Destinos to count.
     * @example
     * // Count the number of Destinos
     * const count = await prisma.destinos.count({
     *   where: {
     *     // ... the filter for the Destinos we want to count
     *   }
     * })
    **/
    count<T extends DestinosCountArgs>(
      args?: Subset<T, DestinosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DestinosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Destinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DestinosAggregateArgs>(args: Subset<T, DestinosAggregateArgs>): Prisma.PrismaPromise<GetDestinosAggregateType<T>>

    /**
     * Group by Destinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DestinosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DestinosGroupByArgs['orderBy'] }
        : { orderBy?: DestinosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DestinosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestinosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Destinos model
   */
  readonly fields: DestinosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Destinos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DestinosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Voos<T extends Destinos$VoosArgs<ExtArgs> = {}>(args?: Subset<T, Destinos$VoosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Destinos model
   */ 
  interface DestinosFieldRefs {
    readonly id: FieldRef<"Destinos", 'Int'>
    readonly local: FieldRef<"Destinos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Destinos findUnique
   */
  export type DestinosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * Filter, which Destinos to fetch.
     */
    where: DestinosWhereUniqueInput
  }

  /**
   * Destinos findUniqueOrThrow
   */
  export type DestinosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * Filter, which Destinos to fetch.
     */
    where: DestinosWhereUniqueInput
  }

  /**
   * Destinos findFirst
   */
  export type DestinosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * Filter, which Destinos to fetch.
     */
    where?: DestinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinos to fetch.
     */
    orderBy?: DestinosOrderByWithRelationInput | DestinosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Destinos.
     */
    cursor?: DestinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Destinos.
     */
    distinct?: DestinosScalarFieldEnum | DestinosScalarFieldEnum[]
  }

  /**
   * Destinos findFirstOrThrow
   */
  export type DestinosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * Filter, which Destinos to fetch.
     */
    where?: DestinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinos to fetch.
     */
    orderBy?: DestinosOrderByWithRelationInput | DestinosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Destinos.
     */
    cursor?: DestinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Destinos.
     */
    distinct?: DestinosScalarFieldEnum | DestinosScalarFieldEnum[]
  }

  /**
   * Destinos findMany
   */
  export type DestinosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * Filter, which Destinos to fetch.
     */
    where?: DestinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Destinos to fetch.
     */
    orderBy?: DestinosOrderByWithRelationInput | DestinosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Destinos.
     */
    cursor?: DestinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Destinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Destinos.
     */
    skip?: number
    distinct?: DestinosScalarFieldEnum | DestinosScalarFieldEnum[]
  }

  /**
   * Destinos create
   */
  export type DestinosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * The data needed to create a Destinos.
     */
    data: XOR<DestinosCreateInput, DestinosUncheckedCreateInput>
  }

  /**
   * Destinos createMany
   */
  export type DestinosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Destinos.
     */
    data: DestinosCreateManyInput | DestinosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Destinos createManyAndReturn
   */
  export type DestinosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * The data used to create many Destinos.
     */
    data: DestinosCreateManyInput | DestinosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Destinos update
   */
  export type DestinosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * The data needed to update a Destinos.
     */
    data: XOR<DestinosUpdateInput, DestinosUncheckedUpdateInput>
    /**
     * Choose, which Destinos to update.
     */
    where: DestinosWhereUniqueInput
  }

  /**
   * Destinos updateMany
   */
  export type DestinosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Destinos.
     */
    data: XOR<DestinosUpdateManyMutationInput, DestinosUncheckedUpdateManyInput>
    /**
     * Filter which Destinos to update
     */
    where?: DestinosWhereInput
  }

  /**
   * Destinos upsert
   */
  export type DestinosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * The filter to search for the Destinos to update in case it exists.
     */
    where: DestinosWhereUniqueInput
    /**
     * In case the Destinos found by the `where` argument doesn't exist, create a new Destinos with this data.
     */
    create: XOR<DestinosCreateInput, DestinosUncheckedCreateInput>
    /**
     * In case the Destinos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DestinosUpdateInput, DestinosUncheckedUpdateInput>
  }

  /**
   * Destinos delete
   */
  export type DestinosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
    /**
     * Filter which Destinos to delete.
     */
    where: DestinosWhereUniqueInput
  }

  /**
   * Destinos deleteMany
   */
  export type DestinosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Destinos to delete
     */
    where?: DestinosWhereInput
  }

  /**
   * Destinos.Voos
   */
  export type Destinos$VoosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    where?: VooWhereInput
    orderBy?: VooOrderByWithRelationInput | VooOrderByWithRelationInput[]
    cursor?: VooWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VooScalarFieldEnum | VooScalarFieldEnum[]
  }

  /**
   * Destinos without action
   */
  export type DestinosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Destinos
     */
    select?: DestinosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DestinosInclude<ExtArgs> | null
  }


  /**
   * Model Voo
   */

  export type AggregateVoo = {
    _count: VooCountAggregateOutputType | null
    _avg: VooAvgAggregateOutputType | null
    _sum: VooSumAggregateOutputType | null
    _min: VooMinAggregateOutputType | null
    _max: VooMaxAggregateOutputType | null
  }

  export type VooAvgAggregateOutputType = {
    id: number | null
    fk_Destinos_id: number | null
    fk_Aviao_id: number | null
  }

  export type VooSumAggregateOutputType = {
    id: number | null
    fk_Destinos_id: number | null
    fk_Aviao_id: number | null
  }

  export type VooMinAggregateOutputType = {
    id: number | null
    fk_Destinos_id: number | null
    fk_Aviao_id: number | null
  }

  export type VooMaxAggregateOutputType = {
    id: number | null
    fk_Destinos_id: number | null
    fk_Aviao_id: number | null
  }

  export type VooCountAggregateOutputType = {
    id: number
    fk_Destinos_id: number
    fk_Aviao_id: number
    _all: number
  }


  export type VooAvgAggregateInputType = {
    id?: true
    fk_Destinos_id?: true
    fk_Aviao_id?: true
  }

  export type VooSumAggregateInputType = {
    id?: true
    fk_Destinos_id?: true
    fk_Aviao_id?: true
  }

  export type VooMinAggregateInputType = {
    id?: true
    fk_Destinos_id?: true
    fk_Aviao_id?: true
  }

  export type VooMaxAggregateInputType = {
    id?: true
    fk_Destinos_id?: true
    fk_Aviao_id?: true
  }

  export type VooCountAggregateInputType = {
    id?: true
    fk_Destinos_id?: true
    fk_Aviao_id?: true
    _all?: true
  }

  export type VooAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Voo to aggregate.
     */
    where?: VooWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Voos to fetch.
     */
    orderBy?: VooOrderByWithRelationInput | VooOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VooWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Voos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Voos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Voos
    **/
    _count?: true | VooCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VooAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VooSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VooMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VooMaxAggregateInputType
  }

  export type GetVooAggregateType<T extends VooAggregateArgs> = {
        [P in keyof T & keyof AggregateVoo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoo[P]>
      : GetScalarType<T[P], AggregateVoo[P]>
  }




  export type VooGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VooWhereInput
    orderBy?: VooOrderByWithAggregationInput | VooOrderByWithAggregationInput[]
    by: VooScalarFieldEnum[] | VooScalarFieldEnum
    having?: VooScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VooCountAggregateInputType | true
    _avg?: VooAvgAggregateInputType
    _sum?: VooSumAggregateInputType
    _min?: VooMinAggregateInputType
    _max?: VooMaxAggregateInputType
  }

  export type VooGroupByOutputType = {
    id: number
    fk_Destinos_id: number
    fk_Aviao_id: number
    _count: VooCountAggregateOutputType | null
    _avg: VooAvgAggregateOutputType | null
    _sum: VooSumAggregateOutputType | null
    _min: VooMinAggregateOutputType | null
    _max: VooMaxAggregateOutputType | null
  }

  type GetVooGroupByPayload<T extends VooGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VooGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VooGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VooGroupByOutputType[P]>
            : GetScalarType<T[P], VooGroupByOutputType[P]>
        }
      >
    >


  export type VooSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fk_Destinos_id?: boolean
    fk_Aviao_id?: boolean
    Destinos?: boolean | DestinosDefaultArgs<ExtArgs>
    Aviao?: boolean | AviaoDefaultArgs<ExtArgs>
    Reservas?: boolean | Voo$ReservasArgs<ExtArgs>
    _count?: boolean | VooCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voo"]>

  export type VooSelectScalar = {
    id?: boolean
    fk_Destinos_id?: boolean
    fk_Aviao_id?: boolean
  }


  export type VooInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Destinos?: boolean | DestinosDefaultArgs<ExtArgs>
    Aviao?: boolean | AviaoDefaultArgs<ExtArgs>
    Reservas?: boolean | Voo$ReservasArgs<ExtArgs>
    _count?: boolean | VooCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $VooPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Voo"
    objects: {
      Destinos: Prisma.$DestinosPayload<ExtArgs>
      Aviao: Prisma.$AviaoPayload<ExtArgs>
      Reservas: Prisma.$ReservaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fk_Destinos_id: number
      fk_Aviao_id: number
    }, ExtArgs["result"]["voo"]>
    composites: {}
  }


  type VooGetPayload<S extends boolean | null | undefined | VooDefaultArgs> = $Result.GetResult<Prisma.$VooPayload, S>

  type VooCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VooFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VooCountAggregateInputType | true
    }

  export interface VooDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Voo'], meta: { name: 'Voo' } }
    /**
     * Find zero or one Voo that matches the filter.
     * @param {VooFindUniqueArgs} args - Arguments to find a Voo
     * @example
     * // Get one Voo
     * const voo = await prisma.voo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VooFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VooFindUniqueArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Voo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VooFindUniqueOrThrowArgs} args - Arguments to find a Voo
     * @example
     * // Get one Voo
     * const voo = await prisma.voo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VooFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VooFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Voo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VooFindFirstArgs} args - Arguments to find a Voo
     * @example
     * // Get one Voo
     * const voo = await prisma.voo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VooFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VooFindFirstArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Voo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VooFindFirstOrThrowArgs} args - Arguments to find a Voo
     * @example
     * // Get one Voo
     * const voo = await prisma.voo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VooFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VooFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Voos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VooFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Voos
     * const voos = await prisma.voo.findMany()
     * 
     * // Get first 10 Voos
     * const voos = await prisma.voo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vooWithIdOnly = await prisma.voo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VooFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VooFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Voo.
     * @param {VooCreateArgs} args - Arguments to create a Voo.
     * @example
     * // Create one Voo
     * const Voo = await prisma.voo.create({
     *   data: {
     *     // ... data to create a Voo
     *   }
     * })
     * 
    **/
    create<T extends VooCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VooCreateArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Voos.
     * @param {VooCreateManyArgs} args - Arguments to create many Voos.
     * @example
     * // Create many Voos
     * const voo = await prisma.voo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends VooCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VooCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Voos and returns the data saved in the database.
     * @param {VooCreateManyAndReturnArgs} args - Arguments to create many Voos.
     * @example
     * // Create many Voos
     * const voo = await prisma.voo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Voos and only return the `id`
     * const vooWithIdOnly = await prisma.voo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends VooCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, VooCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Voo.
     * @param {VooDeleteArgs} args - Arguments to delete one Voo.
     * @example
     * // Delete one Voo
     * const Voo = await prisma.voo.delete({
     *   where: {
     *     // ... filter to delete one Voo
     *   }
     * })
     * 
    **/
    delete<T extends VooDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VooDeleteArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Voo.
     * @param {VooUpdateArgs} args - Arguments to update one Voo.
     * @example
     * // Update one Voo
     * const voo = await prisma.voo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VooUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VooUpdateArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Voos.
     * @param {VooDeleteManyArgs} args - Arguments to filter Voos to delete.
     * @example
     * // Delete a few Voos
     * const { count } = await prisma.voo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VooDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VooDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Voos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VooUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Voos
     * const voo = await prisma.voo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VooUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VooUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Voo.
     * @param {VooUpsertArgs} args - Arguments to update or create a Voo.
     * @example
     * // Update or create a Voo
     * const voo = await prisma.voo.upsert({
     *   create: {
     *     // ... data to create a Voo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voo we want to update
     *   }
     * })
    **/
    upsert<T extends VooUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VooUpsertArgs<ExtArgs>>
    ): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Voos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VooCountArgs} args - Arguments to filter Voos to count.
     * @example
     * // Count the number of Voos
     * const count = await prisma.voo.count({
     *   where: {
     *     // ... the filter for the Voos we want to count
     *   }
     * })
    **/
    count<T extends VooCountArgs>(
      args?: Subset<T, VooCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VooCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VooAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VooAggregateArgs>(args: Subset<T, VooAggregateArgs>): Prisma.PrismaPromise<GetVooAggregateType<T>>

    /**
     * Group by Voo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VooGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VooGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VooGroupByArgs['orderBy'] }
        : { orderBy?: VooGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VooGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVooGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Voo model
   */
  readonly fields: VooFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Voo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VooClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Destinos<T extends DestinosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DestinosDefaultArgs<ExtArgs>>): Prisma__DestinosClient<$Result.GetResult<Prisma.$DestinosPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Aviao<T extends AviaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AviaoDefaultArgs<ExtArgs>>): Prisma__AviaoClient<$Result.GetResult<Prisma.$AviaoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Reservas<T extends Voo$ReservasArgs<ExtArgs> = {}>(args?: Subset<T, Voo$ReservasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Voo model
   */ 
  interface VooFieldRefs {
    readonly id: FieldRef<"Voo", 'Int'>
    readonly fk_Destinos_id: FieldRef<"Voo", 'Int'>
    readonly fk_Aviao_id: FieldRef<"Voo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Voo findUnique
   */
  export type VooFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * Filter, which Voo to fetch.
     */
    where: VooWhereUniqueInput
  }

  /**
   * Voo findUniqueOrThrow
   */
  export type VooFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * Filter, which Voo to fetch.
     */
    where: VooWhereUniqueInput
  }

  /**
   * Voo findFirst
   */
  export type VooFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * Filter, which Voo to fetch.
     */
    where?: VooWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Voos to fetch.
     */
    orderBy?: VooOrderByWithRelationInput | VooOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Voos.
     */
    cursor?: VooWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Voos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Voos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Voos.
     */
    distinct?: VooScalarFieldEnum | VooScalarFieldEnum[]
  }

  /**
   * Voo findFirstOrThrow
   */
  export type VooFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * Filter, which Voo to fetch.
     */
    where?: VooWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Voos to fetch.
     */
    orderBy?: VooOrderByWithRelationInput | VooOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Voos.
     */
    cursor?: VooWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Voos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Voos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Voos.
     */
    distinct?: VooScalarFieldEnum | VooScalarFieldEnum[]
  }

  /**
   * Voo findMany
   */
  export type VooFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * Filter, which Voos to fetch.
     */
    where?: VooWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Voos to fetch.
     */
    orderBy?: VooOrderByWithRelationInput | VooOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Voos.
     */
    cursor?: VooWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Voos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Voos.
     */
    skip?: number
    distinct?: VooScalarFieldEnum | VooScalarFieldEnum[]
  }

  /**
   * Voo create
   */
  export type VooCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * The data needed to create a Voo.
     */
    data: XOR<VooCreateInput, VooUncheckedCreateInput>
  }

  /**
   * Voo createMany
   */
  export type VooCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Voos.
     */
    data: VooCreateManyInput | VooCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Voo createManyAndReturn
   */
  export type VooCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * The data used to create many Voos.
     */
    data: VooCreateManyInput | VooCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Voo update
   */
  export type VooUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * The data needed to update a Voo.
     */
    data: XOR<VooUpdateInput, VooUncheckedUpdateInput>
    /**
     * Choose, which Voo to update.
     */
    where: VooWhereUniqueInput
  }

  /**
   * Voo updateMany
   */
  export type VooUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Voos.
     */
    data: XOR<VooUpdateManyMutationInput, VooUncheckedUpdateManyInput>
    /**
     * Filter which Voos to update
     */
    where?: VooWhereInput
  }

  /**
   * Voo upsert
   */
  export type VooUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * The filter to search for the Voo to update in case it exists.
     */
    where: VooWhereUniqueInput
    /**
     * In case the Voo found by the `where` argument doesn't exist, create a new Voo with this data.
     */
    create: XOR<VooCreateInput, VooUncheckedCreateInput>
    /**
     * In case the Voo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VooUpdateInput, VooUncheckedUpdateInput>
  }

  /**
   * Voo delete
   */
  export type VooDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
    /**
     * Filter which Voo to delete.
     */
    where: VooWhereUniqueInput
  }

  /**
   * Voo deleteMany
   */
  export type VooDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Voos to delete
     */
    where?: VooWhereInput
  }

  /**
   * Voo.Reservas
   */
  export type Voo$ReservasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    where?: ReservaWhereInput
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    cursor?: ReservaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * Voo without action
   */
  export type VooDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voo
     */
    select?: VooSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VooInclude<ExtArgs> | null
  }


  /**
   * Model Reserva
   */

  export type AggregateReserva = {
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  export type ReservaAvgAggregateOutputType = {
    fk_voo_id: number | null
  }

  export type ReservaSumAggregateOutputType = {
    fk_voo_id: number | null
  }

  export type ReservaMinAggregateOutputType = {
    fk_voo_id: number | null
    fk_passageiro_cpf: string | null
  }

  export type ReservaMaxAggregateOutputType = {
    fk_voo_id: number | null
    fk_passageiro_cpf: string | null
  }

  export type ReservaCountAggregateOutputType = {
    fk_voo_id: number
    fk_passageiro_cpf: number
    _all: number
  }


  export type ReservaAvgAggregateInputType = {
    fk_voo_id?: true
  }

  export type ReservaSumAggregateInputType = {
    fk_voo_id?: true
  }

  export type ReservaMinAggregateInputType = {
    fk_voo_id?: true
    fk_passageiro_cpf?: true
  }

  export type ReservaMaxAggregateInputType = {
    fk_voo_id?: true
    fk_passageiro_cpf?: true
  }

  export type ReservaCountAggregateInputType = {
    fk_voo_id?: true
    fk_passageiro_cpf?: true
    _all?: true
  }

  export type ReservaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reserva to aggregate.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservas
    **/
    _count?: true | ReservaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservaMaxAggregateInputType
  }

  export type GetReservaAggregateType<T extends ReservaAggregateArgs> = {
        [P in keyof T & keyof AggregateReserva]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReserva[P]>
      : GetScalarType<T[P], AggregateReserva[P]>
  }




  export type ReservaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservaWhereInput
    orderBy?: ReservaOrderByWithAggregationInput | ReservaOrderByWithAggregationInput[]
    by: ReservaScalarFieldEnum[] | ReservaScalarFieldEnum
    having?: ReservaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservaCountAggregateInputType | true
    _avg?: ReservaAvgAggregateInputType
    _sum?: ReservaSumAggregateInputType
    _min?: ReservaMinAggregateInputType
    _max?: ReservaMaxAggregateInputType
  }

  export type ReservaGroupByOutputType = {
    fk_voo_id: number
    fk_passageiro_cpf: string
    _count: ReservaCountAggregateOutputType | null
    _avg: ReservaAvgAggregateOutputType | null
    _sum: ReservaSumAggregateOutputType | null
    _min: ReservaMinAggregateOutputType | null
    _max: ReservaMaxAggregateOutputType | null
  }

  type GetReservaGroupByPayload<T extends ReservaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservaGroupByOutputType[P]>
            : GetScalarType<T[P], ReservaGroupByOutputType[P]>
        }
      >
    >


  export type ReservaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fk_voo_id?: boolean
    fk_passageiro_cpf?: boolean
    Voo?: boolean | VooDefaultArgs<ExtArgs>
    Passageiro?: boolean | PassageiroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reserva"]>

  export type ReservaSelectScalar = {
    fk_voo_id?: boolean
    fk_passageiro_cpf?: boolean
  }


  export type ReservaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Voo?: boolean | VooDefaultArgs<ExtArgs>
    Passageiro?: boolean | PassageiroDefaultArgs<ExtArgs>
  }


  export type $ReservaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reserva"
    objects: {
      Voo: Prisma.$VooPayload<ExtArgs>
      Passageiro: Prisma.$PassageiroPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      fk_voo_id: number
      fk_passageiro_cpf: string
    }, ExtArgs["result"]["reserva"]>
    composites: {}
  }


  type ReservaGetPayload<S extends boolean | null | undefined | ReservaDefaultArgs> = $Result.GetResult<Prisma.$ReservaPayload, S>

  type ReservaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReservaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReservaCountAggregateInputType | true
    }

  export interface ReservaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reserva'], meta: { name: 'Reserva' } }
    /**
     * Find zero or one Reserva that matches the filter.
     * @param {ReservaFindUniqueArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaFindUniqueArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reserva that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReservaFindUniqueOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reserva that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindFirstArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindFirstArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reserva that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindFirstOrThrowArgs} args - Arguments to find a Reserva
     * @example
     * // Get one Reserva
     * const reserva = await prisma.reserva.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reservas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservas
     * const reservas = await prisma.reserva.findMany()
     * 
     * // Get first 10 Reservas
     * const reservas = await prisma.reserva.findMany({ take: 10 })
     * 
     * // Only select the `fk_voo_id`
     * const reservaWithFk_voo_idOnly = await prisma.reserva.findMany({ select: { fk_voo_id: true } })
     * 
    **/
    findMany<T extends ReservaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reserva.
     * @param {ReservaCreateArgs} args - Arguments to create a Reserva.
     * @example
     * // Create one Reserva
     * const Reserva = await prisma.reserva.create({
     *   data: {
     *     // ... data to create a Reserva
     *   }
     * })
     * 
    **/
    create<T extends ReservaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaCreateArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reservas.
     * @param {ReservaCreateManyArgs} args - Arguments to create many Reservas.
     * @example
     * // Create many Reservas
     * const reserva = await prisma.reserva.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ReservaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reservas and returns the data saved in the database.
     * @param {ReservaCreateManyAndReturnArgs} args - Arguments to create many Reservas.
     * @example
     * // Create many Reservas
     * const reserva = await prisma.reserva.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reservas and only return the `fk_voo_id`
     * const reservaWithFk_voo_idOnly = await prisma.reserva.createManyAndReturn({ 
     *   select: { fk_voo_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ReservaCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Reserva.
     * @param {ReservaDeleteArgs} args - Arguments to delete one Reserva.
     * @example
     * // Delete one Reserva
     * const Reserva = await prisma.reserva.delete({
     *   where: {
     *     // ... filter to delete one Reserva
     *   }
     * })
     * 
    **/
    delete<T extends ReservaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaDeleteArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reserva.
     * @param {ReservaUpdateArgs} args - Arguments to update one Reserva.
     * @example
     * // Update one Reserva
     * const reserva = await prisma.reserva.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaUpdateArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reservas.
     * @param {ReservaDeleteManyArgs} args - Arguments to filter Reservas to delete.
     * @example
     * // Delete a few Reservas
     * const { count } = await prisma.reserva.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservas
     * const reserva = await prisma.reserva.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reserva.
     * @param {ReservaUpsertArgs} args - Arguments to update or create a Reserva.
     * @example
     * // Update or create a Reserva
     * const reserva = await prisma.reserva.upsert({
     *   create: {
     *     // ... data to create a Reserva
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reserva we want to update
     *   }
     * })
    **/
    upsert<T extends ReservaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReservaUpsertArgs<ExtArgs>>
    ): Prisma__ReservaClient<$Result.GetResult<Prisma.$ReservaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reservas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaCountArgs} args - Arguments to filter Reservas to count.
     * @example
     * // Count the number of Reservas
     * const count = await prisma.reserva.count({
     *   where: {
     *     // ... the filter for the Reservas we want to count
     *   }
     * })
    **/
    count<T extends ReservaCountArgs>(
      args?: Subset<T, ReservaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservaAggregateArgs>(args: Subset<T, ReservaAggregateArgs>): Prisma.PrismaPromise<GetReservaAggregateType<T>>

    /**
     * Group by Reserva.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservaGroupByArgs['orderBy'] }
        : { orderBy?: ReservaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reserva model
   */
  readonly fields: ReservaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reserva.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Voo<T extends VooDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VooDefaultArgs<ExtArgs>>): Prisma__VooClient<$Result.GetResult<Prisma.$VooPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Passageiro<T extends PassageiroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PassageiroDefaultArgs<ExtArgs>>): Prisma__PassageiroClient<$Result.GetResult<Prisma.$PassageiroPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reserva model
   */ 
  interface ReservaFieldRefs {
    readonly fk_voo_id: FieldRef<"Reserva", 'Int'>
    readonly fk_passageiro_cpf: FieldRef<"Reserva", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Reserva findUnique
   */
  export type ReservaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where: ReservaWhereUniqueInput
  }

  /**
   * Reserva findUniqueOrThrow
   */
  export type ReservaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where: ReservaWhereUniqueInput
  }

  /**
   * Reserva findFirst
   */
  export type ReservaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * Reserva findFirstOrThrow
   */
  export type ReservaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reserva to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservas.
     */
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * Reserva findMany
   */
  export type ReservaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter, which Reservas to fetch.
     */
    where?: ReservaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservas to fetch.
     */
    orderBy?: ReservaOrderByWithRelationInput | ReservaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservas.
     */
    cursor?: ReservaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservas.
     */
    skip?: number
    distinct?: ReservaScalarFieldEnum | ReservaScalarFieldEnum[]
  }

  /**
   * Reserva create
   */
  export type ReservaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * The data needed to create a Reserva.
     */
    data: XOR<ReservaCreateInput, ReservaUncheckedCreateInput>
  }

  /**
   * Reserva createMany
   */
  export type ReservaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservas.
     */
    data: ReservaCreateManyInput | ReservaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reserva createManyAndReturn
   */
  export type ReservaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * The data used to create many Reservas.
     */
    data: ReservaCreateManyInput | ReservaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reserva update
   */
  export type ReservaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * The data needed to update a Reserva.
     */
    data: XOR<ReservaUpdateInput, ReservaUncheckedUpdateInput>
    /**
     * Choose, which Reserva to update.
     */
    where: ReservaWhereUniqueInput
  }

  /**
   * Reserva updateMany
   */
  export type ReservaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservas.
     */
    data: XOR<ReservaUpdateManyMutationInput, ReservaUncheckedUpdateManyInput>
    /**
     * Filter which Reservas to update
     */
    where?: ReservaWhereInput
  }

  /**
   * Reserva upsert
   */
  export type ReservaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * The filter to search for the Reserva to update in case it exists.
     */
    where: ReservaWhereUniqueInput
    /**
     * In case the Reserva found by the `where` argument doesn't exist, create a new Reserva with this data.
     */
    create: XOR<ReservaCreateInput, ReservaUncheckedCreateInput>
    /**
     * In case the Reserva was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservaUpdateInput, ReservaUncheckedUpdateInput>
  }

  /**
   * Reserva delete
   */
  export type ReservaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
    /**
     * Filter which Reserva to delete.
     */
    where: ReservaWhereUniqueInput
  }

  /**
   * Reserva deleteMany
   */
  export type ReservaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservas to delete
     */
    where?: ReservaWhereInput
  }

  /**
   * Reserva without action
   */
  export type ReservaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reserva
     */
    select?: ReservaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AviaoScalarFieldEnum: {
    id: 'id',
    modelo: 'modelo'
  };

  export type AviaoScalarFieldEnum = (typeof AviaoScalarFieldEnum)[keyof typeof AviaoScalarFieldEnum]


  export const PassageiroScalarFieldEnum: {
    cpf: 'cpf',
    Nome: 'Nome'
  };

  export type PassageiroScalarFieldEnum = (typeof PassageiroScalarFieldEnum)[keyof typeof PassageiroScalarFieldEnum]


  export const FuncionarioScalarFieldEnum: {
    cpf: 'cpf',
    Nome: 'Nome',
    cargo: 'cargo',
    fk_Aviao_id: 'fk_Aviao_id'
  };

  export type FuncionarioScalarFieldEnum = (typeof FuncionarioScalarFieldEnum)[keyof typeof FuncionarioScalarFieldEnum]


  export const DestinosScalarFieldEnum: {
    id: 'id',
    local: 'local'
  };

  export type DestinosScalarFieldEnum = (typeof DestinosScalarFieldEnum)[keyof typeof DestinosScalarFieldEnum]


  export const VooScalarFieldEnum: {
    id: 'id',
    fk_Destinos_id: 'fk_Destinos_id',
    fk_Aviao_id: 'fk_Aviao_id'
  };

  export type VooScalarFieldEnum = (typeof VooScalarFieldEnum)[keyof typeof VooScalarFieldEnum]


  export const ReservaScalarFieldEnum: {
    fk_voo_id: 'fk_voo_id',
    fk_passageiro_cpf: 'fk_passageiro_cpf'
  };

  export type ReservaScalarFieldEnum = (typeof ReservaScalarFieldEnum)[keyof typeof ReservaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AviaoWhereInput = {
    AND?: AviaoWhereInput | AviaoWhereInput[]
    OR?: AviaoWhereInput[]
    NOT?: AviaoWhereInput | AviaoWhereInput[]
    id?: IntFilter<"Aviao"> | number
    modelo?: StringFilter<"Aviao"> | string
    Funcionarios?: FuncionarioListRelationFilter
    Voos?: VooListRelationFilter
  }

  export type AviaoOrderByWithRelationInput = {
    id?: SortOrder
    modelo?: SortOrder
    Funcionarios?: FuncionarioOrderByRelationAggregateInput
    Voos?: VooOrderByRelationAggregateInput
  }

  export type AviaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AviaoWhereInput | AviaoWhereInput[]
    OR?: AviaoWhereInput[]
    NOT?: AviaoWhereInput | AviaoWhereInput[]
    modelo?: StringFilter<"Aviao"> | string
    Funcionarios?: FuncionarioListRelationFilter
    Voos?: VooListRelationFilter
  }, "id">

  export type AviaoOrderByWithAggregationInput = {
    id?: SortOrder
    modelo?: SortOrder
    _count?: AviaoCountOrderByAggregateInput
    _avg?: AviaoAvgOrderByAggregateInput
    _max?: AviaoMaxOrderByAggregateInput
    _min?: AviaoMinOrderByAggregateInput
    _sum?: AviaoSumOrderByAggregateInput
  }

  export type AviaoScalarWhereWithAggregatesInput = {
    AND?: AviaoScalarWhereWithAggregatesInput | AviaoScalarWhereWithAggregatesInput[]
    OR?: AviaoScalarWhereWithAggregatesInput[]
    NOT?: AviaoScalarWhereWithAggregatesInput | AviaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Aviao"> | number
    modelo?: StringWithAggregatesFilter<"Aviao"> | string
  }

  export type PassageiroWhereInput = {
    AND?: PassageiroWhereInput | PassageiroWhereInput[]
    OR?: PassageiroWhereInput[]
    NOT?: PassageiroWhereInput | PassageiroWhereInput[]
    cpf?: StringFilter<"Passageiro"> | string
    Nome?: StringFilter<"Passageiro"> | string
    Reservas?: ReservaListRelationFilter
  }

  export type PassageiroOrderByWithRelationInput = {
    cpf?: SortOrder
    Nome?: SortOrder
    Reservas?: ReservaOrderByRelationAggregateInput
  }

  export type PassageiroWhereUniqueInput = Prisma.AtLeast<{
    cpf?: string
    AND?: PassageiroWhereInput | PassageiroWhereInput[]
    OR?: PassageiroWhereInput[]
    NOT?: PassageiroWhereInput | PassageiroWhereInput[]
    Nome?: StringFilter<"Passageiro"> | string
    Reservas?: ReservaListRelationFilter
  }, "cpf">

  export type PassageiroOrderByWithAggregationInput = {
    cpf?: SortOrder
    Nome?: SortOrder
    _count?: PassageiroCountOrderByAggregateInput
    _max?: PassageiroMaxOrderByAggregateInput
    _min?: PassageiroMinOrderByAggregateInput
  }

  export type PassageiroScalarWhereWithAggregatesInput = {
    AND?: PassageiroScalarWhereWithAggregatesInput | PassageiroScalarWhereWithAggregatesInput[]
    OR?: PassageiroScalarWhereWithAggregatesInput[]
    NOT?: PassageiroScalarWhereWithAggregatesInput | PassageiroScalarWhereWithAggregatesInput[]
    cpf?: StringWithAggregatesFilter<"Passageiro"> | string
    Nome?: StringWithAggregatesFilter<"Passageiro"> | string
  }

  export type FuncionarioWhereInput = {
    AND?: FuncionarioWhereInput | FuncionarioWhereInput[]
    OR?: FuncionarioWhereInput[]
    NOT?: FuncionarioWhereInput | FuncionarioWhereInput[]
    cpf?: StringFilter<"Funcionario"> | string
    Nome?: StringFilter<"Funcionario"> | string
    cargo?: StringFilter<"Funcionario"> | string
    fk_Aviao_id?: IntFilter<"Funcionario"> | number
    Aviao?: XOR<AviaoRelationFilter, AviaoWhereInput>
  }

  export type FuncionarioOrderByWithRelationInput = {
    cpf?: SortOrder
    Nome?: SortOrder
    cargo?: SortOrder
    fk_Aviao_id?: SortOrder
    Aviao?: AviaoOrderByWithRelationInput
  }

  export type FuncionarioWhereUniqueInput = Prisma.AtLeast<{
    cpf?: string
    AND?: FuncionarioWhereInput | FuncionarioWhereInput[]
    OR?: FuncionarioWhereInput[]
    NOT?: FuncionarioWhereInput | FuncionarioWhereInput[]
    Nome?: StringFilter<"Funcionario"> | string
    cargo?: StringFilter<"Funcionario"> | string
    fk_Aviao_id?: IntFilter<"Funcionario"> | number
    Aviao?: XOR<AviaoRelationFilter, AviaoWhereInput>
  }, "cpf">

  export type FuncionarioOrderByWithAggregationInput = {
    cpf?: SortOrder
    Nome?: SortOrder
    cargo?: SortOrder
    fk_Aviao_id?: SortOrder
    _count?: FuncionarioCountOrderByAggregateInput
    _avg?: FuncionarioAvgOrderByAggregateInput
    _max?: FuncionarioMaxOrderByAggregateInput
    _min?: FuncionarioMinOrderByAggregateInput
    _sum?: FuncionarioSumOrderByAggregateInput
  }

  export type FuncionarioScalarWhereWithAggregatesInput = {
    AND?: FuncionarioScalarWhereWithAggregatesInput | FuncionarioScalarWhereWithAggregatesInput[]
    OR?: FuncionarioScalarWhereWithAggregatesInput[]
    NOT?: FuncionarioScalarWhereWithAggregatesInput | FuncionarioScalarWhereWithAggregatesInput[]
    cpf?: StringWithAggregatesFilter<"Funcionario"> | string
    Nome?: StringWithAggregatesFilter<"Funcionario"> | string
    cargo?: StringWithAggregatesFilter<"Funcionario"> | string
    fk_Aviao_id?: IntWithAggregatesFilter<"Funcionario"> | number
  }

  export type DestinosWhereInput = {
    AND?: DestinosWhereInput | DestinosWhereInput[]
    OR?: DestinosWhereInput[]
    NOT?: DestinosWhereInput | DestinosWhereInput[]
    id?: IntFilter<"Destinos"> | number
    local?: StringFilter<"Destinos"> | string
    Voos?: VooListRelationFilter
  }

  export type DestinosOrderByWithRelationInput = {
    id?: SortOrder
    local?: SortOrder
    Voos?: VooOrderByRelationAggregateInput
  }

  export type DestinosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    local_id?: DestinosLocalIdCompoundUniqueInput
    AND?: DestinosWhereInput | DestinosWhereInput[]
    OR?: DestinosWhereInput[]
    NOT?: DestinosWhereInput | DestinosWhereInput[]
    local?: StringFilter<"Destinos"> | string
    Voos?: VooListRelationFilter
  }, "id" | "local_id">

  export type DestinosOrderByWithAggregationInput = {
    id?: SortOrder
    local?: SortOrder
    _count?: DestinosCountOrderByAggregateInput
    _avg?: DestinosAvgOrderByAggregateInput
    _max?: DestinosMaxOrderByAggregateInput
    _min?: DestinosMinOrderByAggregateInput
    _sum?: DestinosSumOrderByAggregateInput
  }

  export type DestinosScalarWhereWithAggregatesInput = {
    AND?: DestinosScalarWhereWithAggregatesInput | DestinosScalarWhereWithAggregatesInput[]
    OR?: DestinosScalarWhereWithAggregatesInput[]
    NOT?: DestinosScalarWhereWithAggregatesInput | DestinosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Destinos"> | number
    local?: StringWithAggregatesFilter<"Destinos"> | string
  }

  export type VooWhereInput = {
    AND?: VooWhereInput | VooWhereInput[]
    OR?: VooWhereInput[]
    NOT?: VooWhereInput | VooWhereInput[]
    id?: IntFilter<"Voo"> | number
    fk_Destinos_id?: IntFilter<"Voo"> | number
    fk_Aviao_id?: IntFilter<"Voo"> | number
    Destinos?: XOR<DestinosRelationFilter, DestinosWhereInput>
    Aviao?: XOR<AviaoRelationFilter, AviaoWhereInput>
    Reservas?: ReservaListRelationFilter
  }

  export type VooOrderByWithRelationInput = {
    id?: SortOrder
    fk_Destinos_id?: SortOrder
    fk_Aviao_id?: SortOrder
    Destinos?: DestinosOrderByWithRelationInput
    Aviao?: AviaoOrderByWithRelationInput
    Reservas?: ReservaOrderByRelationAggregateInput
  }

  export type VooWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VooWhereInput | VooWhereInput[]
    OR?: VooWhereInput[]
    NOT?: VooWhereInput | VooWhereInput[]
    fk_Destinos_id?: IntFilter<"Voo"> | number
    fk_Aviao_id?: IntFilter<"Voo"> | number
    Destinos?: XOR<DestinosRelationFilter, DestinosWhereInput>
    Aviao?: XOR<AviaoRelationFilter, AviaoWhereInput>
    Reservas?: ReservaListRelationFilter
  }, "id">

  export type VooOrderByWithAggregationInput = {
    id?: SortOrder
    fk_Destinos_id?: SortOrder
    fk_Aviao_id?: SortOrder
    _count?: VooCountOrderByAggregateInput
    _avg?: VooAvgOrderByAggregateInput
    _max?: VooMaxOrderByAggregateInput
    _min?: VooMinOrderByAggregateInput
    _sum?: VooSumOrderByAggregateInput
  }

  export type VooScalarWhereWithAggregatesInput = {
    AND?: VooScalarWhereWithAggregatesInput | VooScalarWhereWithAggregatesInput[]
    OR?: VooScalarWhereWithAggregatesInput[]
    NOT?: VooScalarWhereWithAggregatesInput | VooScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Voo"> | number
    fk_Destinos_id?: IntWithAggregatesFilter<"Voo"> | number
    fk_Aviao_id?: IntWithAggregatesFilter<"Voo"> | number
  }

  export type ReservaWhereInput = {
    AND?: ReservaWhereInput | ReservaWhereInput[]
    OR?: ReservaWhereInput[]
    NOT?: ReservaWhereInput | ReservaWhereInput[]
    fk_voo_id?: IntFilter<"Reserva"> | number
    fk_passageiro_cpf?: StringFilter<"Reserva"> | string
    Voo?: XOR<VooRelationFilter, VooWhereInput>
    Passageiro?: XOR<PassageiroRelationFilter, PassageiroWhereInput>
  }

  export type ReservaOrderByWithRelationInput = {
    fk_voo_id?: SortOrder
    fk_passageiro_cpf?: SortOrder
    Voo?: VooOrderByWithRelationInput
    Passageiro?: PassageiroOrderByWithRelationInput
  }

  export type ReservaWhereUniqueInput = Prisma.AtLeast<{
    fk_voo_id_fk_passageiro_cpf?: ReservaFk_voo_idFk_passageiro_cpfCompoundUniqueInput
    AND?: ReservaWhereInput | ReservaWhereInput[]
    OR?: ReservaWhereInput[]
    NOT?: ReservaWhereInput | ReservaWhereInput[]
    fk_voo_id?: IntFilter<"Reserva"> | number
    fk_passageiro_cpf?: StringFilter<"Reserva"> | string
    Voo?: XOR<VooRelationFilter, VooWhereInput>
    Passageiro?: XOR<PassageiroRelationFilter, PassageiroWhereInput>
  }, "fk_voo_id_fk_passageiro_cpf">

  export type ReservaOrderByWithAggregationInput = {
    fk_voo_id?: SortOrder
    fk_passageiro_cpf?: SortOrder
    _count?: ReservaCountOrderByAggregateInput
    _avg?: ReservaAvgOrderByAggregateInput
    _max?: ReservaMaxOrderByAggregateInput
    _min?: ReservaMinOrderByAggregateInput
    _sum?: ReservaSumOrderByAggregateInput
  }

  export type ReservaScalarWhereWithAggregatesInput = {
    AND?: ReservaScalarWhereWithAggregatesInput | ReservaScalarWhereWithAggregatesInput[]
    OR?: ReservaScalarWhereWithAggregatesInput[]
    NOT?: ReservaScalarWhereWithAggregatesInput | ReservaScalarWhereWithAggregatesInput[]
    fk_voo_id?: IntWithAggregatesFilter<"Reserva"> | number
    fk_passageiro_cpf?: StringWithAggregatesFilter<"Reserva"> | string
  }

  export type AviaoCreateInput = {
    modelo: string
    Funcionarios?: FuncionarioCreateNestedManyWithoutAviaoInput
    Voos?: VooCreateNestedManyWithoutAviaoInput
  }

  export type AviaoUncheckedCreateInput = {
    id?: number
    modelo: string
    Funcionarios?: FuncionarioUncheckedCreateNestedManyWithoutAviaoInput
    Voos?: VooUncheckedCreateNestedManyWithoutAviaoInput
  }

  export type AviaoUpdateInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    Funcionarios?: FuncionarioUpdateManyWithoutAviaoNestedInput
    Voos?: VooUpdateManyWithoutAviaoNestedInput
  }

  export type AviaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    Funcionarios?: FuncionarioUncheckedUpdateManyWithoutAviaoNestedInput
    Voos?: VooUncheckedUpdateManyWithoutAviaoNestedInput
  }

  export type AviaoCreateManyInput = {
    id?: number
    modelo: string
  }

  export type AviaoUpdateManyMutationInput = {
    modelo?: StringFieldUpdateOperationsInput | string
  }

  export type AviaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
  }

  export type PassageiroCreateInput = {
    cpf: string
    Nome: string
    Reservas?: ReservaCreateNestedManyWithoutPassageiroInput
  }

  export type PassageiroUncheckedCreateInput = {
    cpf: string
    Nome: string
    Reservas?: ReservaUncheckedCreateNestedManyWithoutPassageiroInput
  }

  export type PassageiroUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Reservas?: ReservaUpdateManyWithoutPassageiroNestedInput
  }

  export type PassageiroUncheckedUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    Reservas?: ReservaUncheckedUpdateManyWithoutPassageiroNestedInput
  }

  export type PassageiroCreateManyInput = {
    cpf: string
    Nome: string
  }

  export type PassageiroUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
  }

  export type PassageiroUncheckedUpdateManyInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioCreateInput = {
    cpf: string
    Nome: string
    cargo: string
    Aviao: AviaoCreateNestedOneWithoutFuncionariosInput
  }

  export type FuncionarioUncheckedCreateInput = {
    cpf: string
    Nome: string
    cargo: string
    fk_Aviao_id: number
  }

  export type FuncionarioUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    Aviao?: AviaoUpdateOneRequiredWithoutFuncionariosNestedInput
  }

  export type FuncionarioUncheckedUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    fk_Aviao_id?: IntFieldUpdateOperationsInput | number
  }

  export type FuncionarioCreateManyInput = {
    cpf: string
    Nome: string
    cargo: string
    fk_Aviao_id: number
  }

  export type FuncionarioUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioUncheckedUpdateManyInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    fk_Aviao_id?: IntFieldUpdateOperationsInput | number
  }

  export type DestinosCreateInput = {
    local: string
    Voos?: VooCreateNestedManyWithoutDestinosInput
  }

  export type DestinosUncheckedCreateInput = {
    id?: number
    local: string
    Voos?: VooUncheckedCreateNestedManyWithoutDestinosInput
  }

  export type DestinosUpdateInput = {
    local?: StringFieldUpdateOperationsInput | string
    Voos?: VooUpdateManyWithoutDestinosNestedInput
  }

  export type DestinosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    local?: StringFieldUpdateOperationsInput | string
    Voos?: VooUncheckedUpdateManyWithoutDestinosNestedInput
  }

  export type DestinosCreateManyInput = {
    id?: number
    local: string
  }

  export type DestinosUpdateManyMutationInput = {
    local?: StringFieldUpdateOperationsInput | string
  }

  export type DestinosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    local?: StringFieldUpdateOperationsInput | string
  }

  export type VooCreateInput = {
    Destinos: DestinosCreateNestedOneWithoutVoosInput
    Aviao: AviaoCreateNestedOneWithoutVoosInput
    Reservas?: ReservaCreateNestedManyWithoutVooInput
  }

  export type VooUncheckedCreateInput = {
    id?: number
    fk_Destinos_id: number
    fk_Aviao_id: number
    Reservas?: ReservaUncheckedCreateNestedManyWithoutVooInput
  }

  export type VooUpdateInput = {
    Destinos?: DestinosUpdateOneRequiredWithoutVoosNestedInput
    Aviao?: AviaoUpdateOneRequiredWithoutVoosNestedInput
    Reservas?: ReservaUpdateManyWithoutVooNestedInput
  }

  export type VooUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fk_Destinos_id?: IntFieldUpdateOperationsInput | number
    fk_Aviao_id?: IntFieldUpdateOperationsInput | number
    Reservas?: ReservaUncheckedUpdateManyWithoutVooNestedInput
  }

  export type VooCreateManyInput = {
    id?: number
    fk_Destinos_id: number
    fk_Aviao_id: number
  }

  export type VooUpdateManyMutationInput = {

  }

  export type VooUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fk_Destinos_id?: IntFieldUpdateOperationsInput | number
    fk_Aviao_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReservaCreateInput = {
    Voo: VooCreateNestedOneWithoutReservasInput
    Passageiro: PassageiroCreateNestedOneWithoutReservasInput
  }

  export type ReservaUncheckedCreateInput = {
    fk_voo_id: number
    fk_passageiro_cpf: string
  }

  export type ReservaUpdateInput = {
    Voo?: VooUpdateOneRequiredWithoutReservasNestedInput
    Passageiro?: PassageiroUpdateOneRequiredWithoutReservasNestedInput
  }

  export type ReservaUncheckedUpdateInput = {
    fk_voo_id?: IntFieldUpdateOperationsInput | number
    fk_passageiro_cpf?: StringFieldUpdateOperationsInput | string
  }

  export type ReservaCreateManyInput = {
    fk_voo_id: number
    fk_passageiro_cpf: string
  }

  export type ReservaUpdateManyMutationInput = {

  }

  export type ReservaUncheckedUpdateManyInput = {
    fk_voo_id?: IntFieldUpdateOperationsInput | number
    fk_passageiro_cpf?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FuncionarioListRelationFilter = {
    every?: FuncionarioWhereInput
    some?: FuncionarioWhereInput
    none?: FuncionarioWhereInput
  }

  export type VooListRelationFilter = {
    every?: VooWhereInput
    some?: VooWhereInput
    none?: VooWhereInput
  }

  export type FuncionarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VooOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AviaoCountOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
  }

  export type AviaoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AviaoMaxOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
  }

  export type AviaoMinOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
  }

  export type AviaoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ReservaListRelationFilter = {
    every?: ReservaWhereInput
    some?: ReservaWhereInput
    none?: ReservaWhereInput
  }

  export type ReservaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PassageiroCountOrderByAggregateInput = {
    cpf?: SortOrder
    Nome?: SortOrder
  }

  export type PassageiroMaxOrderByAggregateInput = {
    cpf?: SortOrder
    Nome?: SortOrder
  }

  export type PassageiroMinOrderByAggregateInput = {
    cpf?: SortOrder
    Nome?: SortOrder
  }

  export type AviaoRelationFilter = {
    is?: AviaoWhereInput
    isNot?: AviaoWhereInput
  }

  export type FuncionarioCountOrderByAggregateInput = {
    cpf?: SortOrder
    Nome?: SortOrder
    cargo?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type FuncionarioAvgOrderByAggregateInput = {
    fk_Aviao_id?: SortOrder
  }

  export type FuncionarioMaxOrderByAggregateInput = {
    cpf?: SortOrder
    Nome?: SortOrder
    cargo?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type FuncionarioMinOrderByAggregateInput = {
    cpf?: SortOrder
    Nome?: SortOrder
    cargo?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type FuncionarioSumOrderByAggregateInput = {
    fk_Aviao_id?: SortOrder
  }

  export type DestinosLocalIdCompoundUniqueInput = {
    local: string
    id: number
  }

  export type DestinosCountOrderByAggregateInput = {
    id?: SortOrder
    local?: SortOrder
  }

  export type DestinosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DestinosMaxOrderByAggregateInput = {
    id?: SortOrder
    local?: SortOrder
  }

  export type DestinosMinOrderByAggregateInput = {
    id?: SortOrder
    local?: SortOrder
  }

  export type DestinosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DestinosRelationFilter = {
    is?: DestinosWhereInput
    isNot?: DestinosWhereInput
  }

  export type VooCountOrderByAggregateInput = {
    id?: SortOrder
    fk_Destinos_id?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type VooAvgOrderByAggregateInput = {
    id?: SortOrder
    fk_Destinos_id?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type VooMaxOrderByAggregateInput = {
    id?: SortOrder
    fk_Destinos_id?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type VooMinOrderByAggregateInput = {
    id?: SortOrder
    fk_Destinos_id?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type VooSumOrderByAggregateInput = {
    id?: SortOrder
    fk_Destinos_id?: SortOrder
    fk_Aviao_id?: SortOrder
  }

  export type VooRelationFilter = {
    is?: VooWhereInput
    isNot?: VooWhereInput
  }

  export type PassageiroRelationFilter = {
    is?: PassageiroWhereInput
    isNot?: PassageiroWhereInput
  }

  export type ReservaFk_voo_idFk_passageiro_cpfCompoundUniqueInput = {
    fk_voo_id: number
    fk_passageiro_cpf: string
  }

  export type ReservaCountOrderByAggregateInput = {
    fk_voo_id?: SortOrder
    fk_passageiro_cpf?: SortOrder
  }

  export type ReservaAvgOrderByAggregateInput = {
    fk_voo_id?: SortOrder
  }

  export type ReservaMaxOrderByAggregateInput = {
    fk_voo_id?: SortOrder
    fk_passageiro_cpf?: SortOrder
  }

  export type ReservaMinOrderByAggregateInput = {
    fk_voo_id?: SortOrder
    fk_passageiro_cpf?: SortOrder
  }

  export type ReservaSumOrderByAggregateInput = {
    fk_voo_id?: SortOrder
  }

  export type FuncionarioCreateNestedManyWithoutAviaoInput = {
    create?: XOR<FuncionarioCreateWithoutAviaoInput, FuncionarioUncheckedCreateWithoutAviaoInput> | FuncionarioCreateWithoutAviaoInput[] | FuncionarioUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutAviaoInput | FuncionarioCreateOrConnectWithoutAviaoInput[]
    createMany?: FuncionarioCreateManyAviaoInputEnvelope
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
  }

  export type VooCreateNestedManyWithoutAviaoInput = {
    create?: XOR<VooCreateWithoutAviaoInput, VooUncheckedCreateWithoutAviaoInput> | VooCreateWithoutAviaoInput[] | VooUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: VooCreateOrConnectWithoutAviaoInput | VooCreateOrConnectWithoutAviaoInput[]
    createMany?: VooCreateManyAviaoInputEnvelope
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
  }

  export type FuncionarioUncheckedCreateNestedManyWithoutAviaoInput = {
    create?: XOR<FuncionarioCreateWithoutAviaoInput, FuncionarioUncheckedCreateWithoutAviaoInput> | FuncionarioCreateWithoutAviaoInput[] | FuncionarioUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutAviaoInput | FuncionarioCreateOrConnectWithoutAviaoInput[]
    createMany?: FuncionarioCreateManyAviaoInputEnvelope
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
  }

  export type VooUncheckedCreateNestedManyWithoutAviaoInput = {
    create?: XOR<VooCreateWithoutAviaoInput, VooUncheckedCreateWithoutAviaoInput> | VooCreateWithoutAviaoInput[] | VooUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: VooCreateOrConnectWithoutAviaoInput | VooCreateOrConnectWithoutAviaoInput[]
    createMany?: VooCreateManyAviaoInputEnvelope
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FuncionarioUpdateManyWithoutAviaoNestedInput = {
    create?: XOR<FuncionarioCreateWithoutAviaoInput, FuncionarioUncheckedCreateWithoutAviaoInput> | FuncionarioCreateWithoutAviaoInput[] | FuncionarioUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutAviaoInput | FuncionarioCreateOrConnectWithoutAviaoInput[]
    upsert?: FuncionarioUpsertWithWhereUniqueWithoutAviaoInput | FuncionarioUpsertWithWhereUniqueWithoutAviaoInput[]
    createMany?: FuncionarioCreateManyAviaoInputEnvelope
    set?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    disconnect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    delete?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    update?: FuncionarioUpdateWithWhereUniqueWithoutAviaoInput | FuncionarioUpdateWithWhereUniqueWithoutAviaoInput[]
    updateMany?: FuncionarioUpdateManyWithWhereWithoutAviaoInput | FuncionarioUpdateManyWithWhereWithoutAviaoInput[]
    deleteMany?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
  }

  export type VooUpdateManyWithoutAviaoNestedInput = {
    create?: XOR<VooCreateWithoutAviaoInput, VooUncheckedCreateWithoutAviaoInput> | VooCreateWithoutAviaoInput[] | VooUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: VooCreateOrConnectWithoutAviaoInput | VooCreateOrConnectWithoutAviaoInput[]
    upsert?: VooUpsertWithWhereUniqueWithoutAviaoInput | VooUpsertWithWhereUniqueWithoutAviaoInput[]
    createMany?: VooCreateManyAviaoInputEnvelope
    set?: VooWhereUniqueInput | VooWhereUniqueInput[]
    disconnect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    delete?: VooWhereUniqueInput | VooWhereUniqueInput[]
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    update?: VooUpdateWithWhereUniqueWithoutAviaoInput | VooUpdateWithWhereUniqueWithoutAviaoInput[]
    updateMany?: VooUpdateManyWithWhereWithoutAviaoInput | VooUpdateManyWithWhereWithoutAviaoInput[]
    deleteMany?: VooScalarWhereInput | VooScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FuncionarioUncheckedUpdateManyWithoutAviaoNestedInput = {
    create?: XOR<FuncionarioCreateWithoutAviaoInput, FuncionarioUncheckedCreateWithoutAviaoInput> | FuncionarioCreateWithoutAviaoInput[] | FuncionarioUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutAviaoInput | FuncionarioCreateOrConnectWithoutAviaoInput[]
    upsert?: FuncionarioUpsertWithWhereUniqueWithoutAviaoInput | FuncionarioUpsertWithWhereUniqueWithoutAviaoInput[]
    createMany?: FuncionarioCreateManyAviaoInputEnvelope
    set?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    disconnect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    delete?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    update?: FuncionarioUpdateWithWhereUniqueWithoutAviaoInput | FuncionarioUpdateWithWhereUniqueWithoutAviaoInput[]
    updateMany?: FuncionarioUpdateManyWithWhereWithoutAviaoInput | FuncionarioUpdateManyWithWhereWithoutAviaoInput[]
    deleteMany?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
  }

  export type VooUncheckedUpdateManyWithoutAviaoNestedInput = {
    create?: XOR<VooCreateWithoutAviaoInput, VooUncheckedCreateWithoutAviaoInput> | VooCreateWithoutAviaoInput[] | VooUncheckedCreateWithoutAviaoInput[]
    connectOrCreate?: VooCreateOrConnectWithoutAviaoInput | VooCreateOrConnectWithoutAviaoInput[]
    upsert?: VooUpsertWithWhereUniqueWithoutAviaoInput | VooUpsertWithWhereUniqueWithoutAviaoInput[]
    createMany?: VooCreateManyAviaoInputEnvelope
    set?: VooWhereUniqueInput | VooWhereUniqueInput[]
    disconnect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    delete?: VooWhereUniqueInput | VooWhereUniqueInput[]
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    update?: VooUpdateWithWhereUniqueWithoutAviaoInput | VooUpdateWithWhereUniqueWithoutAviaoInput[]
    updateMany?: VooUpdateManyWithWhereWithoutAviaoInput | VooUpdateManyWithWhereWithoutAviaoInput[]
    deleteMany?: VooScalarWhereInput | VooScalarWhereInput[]
  }

  export type ReservaCreateNestedManyWithoutPassageiroInput = {
    create?: XOR<ReservaCreateWithoutPassageiroInput, ReservaUncheckedCreateWithoutPassageiroInput> | ReservaCreateWithoutPassageiroInput[] | ReservaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutPassageiroInput | ReservaCreateOrConnectWithoutPassageiroInput[]
    createMany?: ReservaCreateManyPassageiroInputEnvelope
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
  }

  export type ReservaUncheckedCreateNestedManyWithoutPassageiroInput = {
    create?: XOR<ReservaCreateWithoutPassageiroInput, ReservaUncheckedCreateWithoutPassageiroInput> | ReservaCreateWithoutPassageiroInput[] | ReservaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutPassageiroInput | ReservaCreateOrConnectWithoutPassageiroInput[]
    createMany?: ReservaCreateManyPassageiroInputEnvelope
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
  }

  export type ReservaUpdateManyWithoutPassageiroNestedInput = {
    create?: XOR<ReservaCreateWithoutPassageiroInput, ReservaUncheckedCreateWithoutPassageiroInput> | ReservaCreateWithoutPassageiroInput[] | ReservaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutPassageiroInput | ReservaCreateOrConnectWithoutPassageiroInput[]
    upsert?: ReservaUpsertWithWhereUniqueWithoutPassageiroInput | ReservaUpsertWithWhereUniqueWithoutPassageiroInput[]
    createMany?: ReservaCreateManyPassageiroInputEnvelope
    set?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    disconnect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    delete?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    update?: ReservaUpdateWithWhereUniqueWithoutPassageiroInput | ReservaUpdateWithWhereUniqueWithoutPassageiroInput[]
    updateMany?: ReservaUpdateManyWithWhereWithoutPassageiroInput | ReservaUpdateManyWithWhereWithoutPassageiroInput[]
    deleteMany?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
  }

  export type ReservaUncheckedUpdateManyWithoutPassageiroNestedInput = {
    create?: XOR<ReservaCreateWithoutPassageiroInput, ReservaUncheckedCreateWithoutPassageiroInput> | ReservaCreateWithoutPassageiroInput[] | ReservaUncheckedCreateWithoutPassageiroInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutPassageiroInput | ReservaCreateOrConnectWithoutPassageiroInput[]
    upsert?: ReservaUpsertWithWhereUniqueWithoutPassageiroInput | ReservaUpsertWithWhereUniqueWithoutPassageiroInput[]
    createMany?: ReservaCreateManyPassageiroInputEnvelope
    set?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    disconnect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    delete?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    update?: ReservaUpdateWithWhereUniqueWithoutPassageiroInput | ReservaUpdateWithWhereUniqueWithoutPassageiroInput[]
    updateMany?: ReservaUpdateManyWithWhereWithoutPassageiroInput | ReservaUpdateManyWithWhereWithoutPassageiroInput[]
    deleteMany?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
  }

  export type AviaoCreateNestedOneWithoutFuncionariosInput = {
    create?: XOR<AviaoCreateWithoutFuncionariosInput, AviaoUncheckedCreateWithoutFuncionariosInput>
    connectOrCreate?: AviaoCreateOrConnectWithoutFuncionariosInput
    connect?: AviaoWhereUniqueInput
  }

  export type AviaoUpdateOneRequiredWithoutFuncionariosNestedInput = {
    create?: XOR<AviaoCreateWithoutFuncionariosInput, AviaoUncheckedCreateWithoutFuncionariosInput>
    connectOrCreate?: AviaoCreateOrConnectWithoutFuncionariosInput
    upsert?: AviaoUpsertWithoutFuncionariosInput
    connect?: AviaoWhereUniqueInput
    update?: XOR<XOR<AviaoUpdateToOneWithWhereWithoutFuncionariosInput, AviaoUpdateWithoutFuncionariosInput>, AviaoUncheckedUpdateWithoutFuncionariosInput>
  }

  export type VooCreateNestedManyWithoutDestinosInput = {
    create?: XOR<VooCreateWithoutDestinosInput, VooUncheckedCreateWithoutDestinosInput> | VooCreateWithoutDestinosInput[] | VooUncheckedCreateWithoutDestinosInput[]
    connectOrCreate?: VooCreateOrConnectWithoutDestinosInput | VooCreateOrConnectWithoutDestinosInput[]
    createMany?: VooCreateManyDestinosInputEnvelope
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
  }

  export type VooUncheckedCreateNestedManyWithoutDestinosInput = {
    create?: XOR<VooCreateWithoutDestinosInput, VooUncheckedCreateWithoutDestinosInput> | VooCreateWithoutDestinosInput[] | VooUncheckedCreateWithoutDestinosInput[]
    connectOrCreate?: VooCreateOrConnectWithoutDestinosInput | VooCreateOrConnectWithoutDestinosInput[]
    createMany?: VooCreateManyDestinosInputEnvelope
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
  }

  export type VooUpdateManyWithoutDestinosNestedInput = {
    create?: XOR<VooCreateWithoutDestinosInput, VooUncheckedCreateWithoutDestinosInput> | VooCreateWithoutDestinosInput[] | VooUncheckedCreateWithoutDestinosInput[]
    connectOrCreate?: VooCreateOrConnectWithoutDestinosInput | VooCreateOrConnectWithoutDestinosInput[]
    upsert?: VooUpsertWithWhereUniqueWithoutDestinosInput | VooUpsertWithWhereUniqueWithoutDestinosInput[]
    createMany?: VooCreateManyDestinosInputEnvelope
    set?: VooWhereUniqueInput | VooWhereUniqueInput[]
    disconnect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    delete?: VooWhereUniqueInput | VooWhereUniqueInput[]
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    update?: VooUpdateWithWhereUniqueWithoutDestinosInput | VooUpdateWithWhereUniqueWithoutDestinosInput[]
    updateMany?: VooUpdateManyWithWhereWithoutDestinosInput | VooUpdateManyWithWhereWithoutDestinosInput[]
    deleteMany?: VooScalarWhereInput | VooScalarWhereInput[]
  }

  export type VooUncheckedUpdateManyWithoutDestinosNestedInput = {
    create?: XOR<VooCreateWithoutDestinosInput, VooUncheckedCreateWithoutDestinosInput> | VooCreateWithoutDestinosInput[] | VooUncheckedCreateWithoutDestinosInput[]
    connectOrCreate?: VooCreateOrConnectWithoutDestinosInput | VooCreateOrConnectWithoutDestinosInput[]
    upsert?: VooUpsertWithWhereUniqueWithoutDestinosInput | VooUpsertWithWhereUniqueWithoutDestinosInput[]
    createMany?: VooCreateManyDestinosInputEnvelope
    set?: VooWhereUniqueInput | VooWhereUniqueInput[]
    disconnect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    delete?: VooWhereUniqueInput | VooWhereUniqueInput[]
    connect?: VooWhereUniqueInput | VooWhereUniqueInput[]
    update?: VooUpdateWithWhereUniqueWithoutDestinosInput | VooUpdateWithWhereUniqueWithoutDestinosInput[]
    updateMany?: VooUpdateManyWithWhereWithoutDestinosInput | VooUpdateManyWithWhereWithoutDestinosInput[]
    deleteMany?: VooScalarWhereInput | VooScalarWhereInput[]
  }

  export type DestinosCreateNestedOneWithoutVoosInput = {
    create?: XOR<DestinosCreateWithoutVoosInput, DestinosUncheckedCreateWithoutVoosInput>
    connectOrCreate?: DestinosCreateOrConnectWithoutVoosInput
    connect?: DestinosWhereUniqueInput
  }

  export type AviaoCreateNestedOneWithoutVoosInput = {
    create?: XOR<AviaoCreateWithoutVoosInput, AviaoUncheckedCreateWithoutVoosInput>
    connectOrCreate?: AviaoCreateOrConnectWithoutVoosInput
    connect?: AviaoWhereUniqueInput
  }

  export type ReservaCreateNestedManyWithoutVooInput = {
    create?: XOR<ReservaCreateWithoutVooInput, ReservaUncheckedCreateWithoutVooInput> | ReservaCreateWithoutVooInput[] | ReservaUncheckedCreateWithoutVooInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutVooInput | ReservaCreateOrConnectWithoutVooInput[]
    createMany?: ReservaCreateManyVooInputEnvelope
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
  }

  export type ReservaUncheckedCreateNestedManyWithoutVooInput = {
    create?: XOR<ReservaCreateWithoutVooInput, ReservaUncheckedCreateWithoutVooInput> | ReservaCreateWithoutVooInput[] | ReservaUncheckedCreateWithoutVooInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutVooInput | ReservaCreateOrConnectWithoutVooInput[]
    createMany?: ReservaCreateManyVooInputEnvelope
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
  }

  export type DestinosUpdateOneRequiredWithoutVoosNestedInput = {
    create?: XOR<DestinosCreateWithoutVoosInput, DestinosUncheckedCreateWithoutVoosInput>
    connectOrCreate?: DestinosCreateOrConnectWithoutVoosInput
    upsert?: DestinosUpsertWithoutVoosInput
    connect?: DestinosWhereUniqueInput
    update?: XOR<XOR<DestinosUpdateToOneWithWhereWithoutVoosInput, DestinosUpdateWithoutVoosInput>, DestinosUncheckedUpdateWithoutVoosInput>
  }

  export type AviaoUpdateOneRequiredWithoutVoosNestedInput = {
    create?: XOR<AviaoCreateWithoutVoosInput, AviaoUncheckedCreateWithoutVoosInput>
    connectOrCreate?: AviaoCreateOrConnectWithoutVoosInput
    upsert?: AviaoUpsertWithoutVoosInput
    connect?: AviaoWhereUniqueInput
    update?: XOR<XOR<AviaoUpdateToOneWithWhereWithoutVoosInput, AviaoUpdateWithoutVoosInput>, AviaoUncheckedUpdateWithoutVoosInput>
  }

  export type ReservaUpdateManyWithoutVooNestedInput = {
    create?: XOR<ReservaCreateWithoutVooInput, ReservaUncheckedCreateWithoutVooInput> | ReservaCreateWithoutVooInput[] | ReservaUncheckedCreateWithoutVooInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutVooInput | ReservaCreateOrConnectWithoutVooInput[]
    upsert?: ReservaUpsertWithWhereUniqueWithoutVooInput | ReservaUpsertWithWhereUniqueWithoutVooInput[]
    createMany?: ReservaCreateManyVooInputEnvelope
    set?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    disconnect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    delete?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    update?: ReservaUpdateWithWhereUniqueWithoutVooInput | ReservaUpdateWithWhereUniqueWithoutVooInput[]
    updateMany?: ReservaUpdateManyWithWhereWithoutVooInput | ReservaUpdateManyWithWhereWithoutVooInput[]
    deleteMany?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
  }

  export type ReservaUncheckedUpdateManyWithoutVooNestedInput = {
    create?: XOR<ReservaCreateWithoutVooInput, ReservaUncheckedCreateWithoutVooInput> | ReservaCreateWithoutVooInput[] | ReservaUncheckedCreateWithoutVooInput[]
    connectOrCreate?: ReservaCreateOrConnectWithoutVooInput | ReservaCreateOrConnectWithoutVooInput[]
    upsert?: ReservaUpsertWithWhereUniqueWithoutVooInput | ReservaUpsertWithWhereUniqueWithoutVooInput[]
    createMany?: ReservaCreateManyVooInputEnvelope
    set?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    disconnect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    delete?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    connect?: ReservaWhereUniqueInput | ReservaWhereUniqueInput[]
    update?: ReservaUpdateWithWhereUniqueWithoutVooInput | ReservaUpdateWithWhereUniqueWithoutVooInput[]
    updateMany?: ReservaUpdateManyWithWhereWithoutVooInput | ReservaUpdateManyWithWhereWithoutVooInput[]
    deleteMany?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
  }

  export type VooCreateNestedOneWithoutReservasInput = {
    create?: XOR<VooCreateWithoutReservasInput, VooUncheckedCreateWithoutReservasInput>
    connectOrCreate?: VooCreateOrConnectWithoutReservasInput
    connect?: VooWhereUniqueInput
  }

  export type PassageiroCreateNestedOneWithoutReservasInput = {
    create?: XOR<PassageiroCreateWithoutReservasInput, PassageiroUncheckedCreateWithoutReservasInput>
    connectOrCreate?: PassageiroCreateOrConnectWithoutReservasInput
    connect?: PassageiroWhereUniqueInput
  }

  export type VooUpdateOneRequiredWithoutReservasNestedInput = {
    create?: XOR<VooCreateWithoutReservasInput, VooUncheckedCreateWithoutReservasInput>
    connectOrCreate?: VooCreateOrConnectWithoutReservasInput
    upsert?: VooUpsertWithoutReservasInput
    connect?: VooWhereUniqueInput
    update?: XOR<XOR<VooUpdateToOneWithWhereWithoutReservasInput, VooUpdateWithoutReservasInput>, VooUncheckedUpdateWithoutReservasInput>
  }

  export type PassageiroUpdateOneRequiredWithoutReservasNestedInput = {
    create?: XOR<PassageiroCreateWithoutReservasInput, PassageiroUncheckedCreateWithoutReservasInput>
    connectOrCreate?: PassageiroCreateOrConnectWithoutReservasInput
    upsert?: PassageiroUpsertWithoutReservasInput
    connect?: PassageiroWhereUniqueInput
    update?: XOR<XOR<PassageiroUpdateToOneWithWhereWithoutReservasInput, PassageiroUpdateWithoutReservasInput>, PassageiroUncheckedUpdateWithoutReservasInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FuncionarioCreateWithoutAviaoInput = {
    cpf: string
    Nome: string
    cargo: string
  }

  export type FuncionarioUncheckedCreateWithoutAviaoInput = {
    cpf: string
    Nome: string
    cargo: string
  }

  export type FuncionarioCreateOrConnectWithoutAviaoInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutAviaoInput, FuncionarioUncheckedCreateWithoutAviaoInput>
  }

  export type FuncionarioCreateManyAviaoInputEnvelope = {
    data: FuncionarioCreateManyAviaoInput | FuncionarioCreateManyAviaoInput[]
    skipDuplicates?: boolean
  }

  export type VooCreateWithoutAviaoInput = {
    Destinos: DestinosCreateNestedOneWithoutVoosInput
    Reservas?: ReservaCreateNestedManyWithoutVooInput
  }

  export type VooUncheckedCreateWithoutAviaoInput = {
    id?: number
    fk_Destinos_id: number
    Reservas?: ReservaUncheckedCreateNestedManyWithoutVooInput
  }

  export type VooCreateOrConnectWithoutAviaoInput = {
    where: VooWhereUniqueInput
    create: XOR<VooCreateWithoutAviaoInput, VooUncheckedCreateWithoutAviaoInput>
  }

  export type VooCreateManyAviaoInputEnvelope = {
    data: VooCreateManyAviaoInput | VooCreateManyAviaoInput[]
    skipDuplicates?: boolean
  }

  export type FuncionarioUpsertWithWhereUniqueWithoutAviaoInput = {
    where: FuncionarioWhereUniqueInput
    update: XOR<FuncionarioUpdateWithoutAviaoInput, FuncionarioUncheckedUpdateWithoutAviaoInput>
    create: XOR<FuncionarioCreateWithoutAviaoInput, FuncionarioUncheckedCreateWithoutAviaoInput>
  }

  export type FuncionarioUpdateWithWhereUniqueWithoutAviaoInput = {
    where: FuncionarioWhereUniqueInput
    data: XOR<FuncionarioUpdateWithoutAviaoInput, FuncionarioUncheckedUpdateWithoutAviaoInput>
  }

  export type FuncionarioUpdateManyWithWhereWithoutAviaoInput = {
    where: FuncionarioScalarWhereInput
    data: XOR<FuncionarioUpdateManyMutationInput, FuncionarioUncheckedUpdateManyWithoutAviaoInput>
  }

  export type FuncionarioScalarWhereInput = {
    AND?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
    OR?: FuncionarioScalarWhereInput[]
    NOT?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
    cpf?: StringFilter<"Funcionario"> | string
    Nome?: StringFilter<"Funcionario"> | string
    cargo?: StringFilter<"Funcionario"> | string
    fk_Aviao_id?: IntFilter<"Funcionario"> | number
  }

  export type VooUpsertWithWhereUniqueWithoutAviaoInput = {
    where: VooWhereUniqueInput
    update: XOR<VooUpdateWithoutAviaoInput, VooUncheckedUpdateWithoutAviaoInput>
    create: XOR<VooCreateWithoutAviaoInput, VooUncheckedCreateWithoutAviaoInput>
  }

  export type VooUpdateWithWhereUniqueWithoutAviaoInput = {
    where: VooWhereUniqueInput
    data: XOR<VooUpdateWithoutAviaoInput, VooUncheckedUpdateWithoutAviaoInput>
  }

  export type VooUpdateManyWithWhereWithoutAviaoInput = {
    where: VooScalarWhereInput
    data: XOR<VooUpdateManyMutationInput, VooUncheckedUpdateManyWithoutAviaoInput>
  }

  export type VooScalarWhereInput = {
    AND?: VooScalarWhereInput | VooScalarWhereInput[]
    OR?: VooScalarWhereInput[]
    NOT?: VooScalarWhereInput | VooScalarWhereInput[]
    id?: IntFilter<"Voo"> | number
    fk_Destinos_id?: IntFilter<"Voo"> | number
    fk_Aviao_id?: IntFilter<"Voo"> | number
  }

  export type ReservaCreateWithoutPassageiroInput = {
    Voo: VooCreateNestedOneWithoutReservasInput
  }

  export type ReservaUncheckedCreateWithoutPassageiroInput = {
    fk_voo_id: number
  }

  export type ReservaCreateOrConnectWithoutPassageiroInput = {
    where: ReservaWhereUniqueInput
    create: XOR<ReservaCreateWithoutPassageiroInput, ReservaUncheckedCreateWithoutPassageiroInput>
  }

  export type ReservaCreateManyPassageiroInputEnvelope = {
    data: ReservaCreateManyPassageiroInput | ReservaCreateManyPassageiroInput[]
    skipDuplicates?: boolean
  }

  export type ReservaUpsertWithWhereUniqueWithoutPassageiroInput = {
    where: ReservaWhereUniqueInput
    update: XOR<ReservaUpdateWithoutPassageiroInput, ReservaUncheckedUpdateWithoutPassageiroInput>
    create: XOR<ReservaCreateWithoutPassageiroInput, ReservaUncheckedCreateWithoutPassageiroInput>
  }

  export type ReservaUpdateWithWhereUniqueWithoutPassageiroInput = {
    where: ReservaWhereUniqueInput
    data: XOR<ReservaUpdateWithoutPassageiroInput, ReservaUncheckedUpdateWithoutPassageiroInput>
  }

  export type ReservaUpdateManyWithWhereWithoutPassageiroInput = {
    where: ReservaScalarWhereInput
    data: XOR<ReservaUpdateManyMutationInput, ReservaUncheckedUpdateManyWithoutPassageiroInput>
  }

  export type ReservaScalarWhereInput = {
    AND?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
    OR?: ReservaScalarWhereInput[]
    NOT?: ReservaScalarWhereInput | ReservaScalarWhereInput[]
    fk_voo_id?: IntFilter<"Reserva"> | number
    fk_passageiro_cpf?: StringFilter<"Reserva"> | string
  }

  export type AviaoCreateWithoutFuncionariosInput = {
    modelo: string
    Voos?: VooCreateNestedManyWithoutAviaoInput
  }

  export type AviaoUncheckedCreateWithoutFuncionariosInput = {
    id?: number
    modelo: string
    Voos?: VooUncheckedCreateNestedManyWithoutAviaoInput
  }

  export type AviaoCreateOrConnectWithoutFuncionariosInput = {
    where: AviaoWhereUniqueInput
    create: XOR<AviaoCreateWithoutFuncionariosInput, AviaoUncheckedCreateWithoutFuncionariosInput>
  }

  export type AviaoUpsertWithoutFuncionariosInput = {
    update: XOR<AviaoUpdateWithoutFuncionariosInput, AviaoUncheckedUpdateWithoutFuncionariosInput>
    create: XOR<AviaoCreateWithoutFuncionariosInput, AviaoUncheckedCreateWithoutFuncionariosInput>
    where?: AviaoWhereInput
  }

  export type AviaoUpdateToOneWithWhereWithoutFuncionariosInput = {
    where?: AviaoWhereInput
    data: XOR<AviaoUpdateWithoutFuncionariosInput, AviaoUncheckedUpdateWithoutFuncionariosInput>
  }

  export type AviaoUpdateWithoutFuncionariosInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    Voos?: VooUpdateManyWithoutAviaoNestedInput
  }

  export type AviaoUncheckedUpdateWithoutFuncionariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    Voos?: VooUncheckedUpdateManyWithoutAviaoNestedInput
  }

  export type VooCreateWithoutDestinosInput = {
    Aviao: AviaoCreateNestedOneWithoutVoosInput
    Reservas?: ReservaCreateNestedManyWithoutVooInput
  }

  export type VooUncheckedCreateWithoutDestinosInput = {
    id?: number
    fk_Aviao_id: number
    Reservas?: ReservaUncheckedCreateNestedManyWithoutVooInput
  }

  export type VooCreateOrConnectWithoutDestinosInput = {
    where: VooWhereUniqueInput
    create: XOR<VooCreateWithoutDestinosInput, VooUncheckedCreateWithoutDestinosInput>
  }

  export type VooCreateManyDestinosInputEnvelope = {
    data: VooCreateManyDestinosInput | VooCreateManyDestinosInput[]
    skipDuplicates?: boolean
  }

  export type VooUpsertWithWhereUniqueWithoutDestinosInput = {
    where: VooWhereUniqueInput
    update: XOR<VooUpdateWithoutDestinosInput, VooUncheckedUpdateWithoutDestinosInput>
    create: XOR<VooCreateWithoutDestinosInput, VooUncheckedCreateWithoutDestinosInput>
  }

  export type VooUpdateWithWhereUniqueWithoutDestinosInput = {
    where: VooWhereUniqueInput
    data: XOR<VooUpdateWithoutDestinosInput, VooUncheckedUpdateWithoutDestinosInput>
  }

  export type VooUpdateManyWithWhereWithoutDestinosInput = {
    where: VooScalarWhereInput
    data: XOR<VooUpdateManyMutationInput, VooUncheckedUpdateManyWithoutDestinosInput>
  }

  export type DestinosCreateWithoutVoosInput = {
    local: string
  }

  export type DestinosUncheckedCreateWithoutVoosInput = {
    id?: number
    local: string
  }

  export type DestinosCreateOrConnectWithoutVoosInput = {
    where: DestinosWhereUniqueInput
    create: XOR<DestinosCreateWithoutVoosInput, DestinosUncheckedCreateWithoutVoosInput>
  }

  export type AviaoCreateWithoutVoosInput = {
    modelo: string
    Funcionarios?: FuncionarioCreateNestedManyWithoutAviaoInput
  }

  export type AviaoUncheckedCreateWithoutVoosInput = {
    id?: number
    modelo: string
    Funcionarios?: FuncionarioUncheckedCreateNestedManyWithoutAviaoInput
  }

  export type AviaoCreateOrConnectWithoutVoosInput = {
    where: AviaoWhereUniqueInput
    create: XOR<AviaoCreateWithoutVoosInput, AviaoUncheckedCreateWithoutVoosInput>
  }

  export type ReservaCreateWithoutVooInput = {
    Passageiro: PassageiroCreateNestedOneWithoutReservasInput
  }

  export type ReservaUncheckedCreateWithoutVooInput = {
    fk_passageiro_cpf: string
  }

  export type ReservaCreateOrConnectWithoutVooInput = {
    where: ReservaWhereUniqueInput
    create: XOR<ReservaCreateWithoutVooInput, ReservaUncheckedCreateWithoutVooInput>
  }

  export type ReservaCreateManyVooInputEnvelope = {
    data: ReservaCreateManyVooInput | ReservaCreateManyVooInput[]
    skipDuplicates?: boolean
  }

  export type DestinosUpsertWithoutVoosInput = {
    update: XOR<DestinosUpdateWithoutVoosInput, DestinosUncheckedUpdateWithoutVoosInput>
    create: XOR<DestinosCreateWithoutVoosInput, DestinosUncheckedCreateWithoutVoosInput>
    where?: DestinosWhereInput
  }

  export type DestinosUpdateToOneWithWhereWithoutVoosInput = {
    where?: DestinosWhereInput
    data: XOR<DestinosUpdateWithoutVoosInput, DestinosUncheckedUpdateWithoutVoosInput>
  }

  export type DestinosUpdateWithoutVoosInput = {
    local?: StringFieldUpdateOperationsInput | string
  }

  export type DestinosUncheckedUpdateWithoutVoosInput = {
    id?: IntFieldUpdateOperationsInput | number
    local?: StringFieldUpdateOperationsInput | string
  }

  export type AviaoUpsertWithoutVoosInput = {
    update: XOR<AviaoUpdateWithoutVoosInput, AviaoUncheckedUpdateWithoutVoosInput>
    create: XOR<AviaoCreateWithoutVoosInput, AviaoUncheckedCreateWithoutVoosInput>
    where?: AviaoWhereInput
  }

  export type AviaoUpdateToOneWithWhereWithoutVoosInput = {
    where?: AviaoWhereInput
    data: XOR<AviaoUpdateWithoutVoosInput, AviaoUncheckedUpdateWithoutVoosInput>
  }

  export type AviaoUpdateWithoutVoosInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    Funcionarios?: FuncionarioUpdateManyWithoutAviaoNestedInput
  }

  export type AviaoUncheckedUpdateWithoutVoosInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    Funcionarios?: FuncionarioUncheckedUpdateManyWithoutAviaoNestedInput
  }

  export type ReservaUpsertWithWhereUniqueWithoutVooInput = {
    where: ReservaWhereUniqueInput
    update: XOR<ReservaUpdateWithoutVooInput, ReservaUncheckedUpdateWithoutVooInput>
    create: XOR<ReservaCreateWithoutVooInput, ReservaUncheckedCreateWithoutVooInput>
  }

  export type ReservaUpdateWithWhereUniqueWithoutVooInput = {
    where: ReservaWhereUniqueInput
    data: XOR<ReservaUpdateWithoutVooInput, ReservaUncheckedUpdateWithoutVooInput>
  }

  export type ReservaUpdateManyWithWhereWithoutVooInput = {
    where: ReservaScalarWhereInput
    data: XOR<ReservaUpdateManyMutationInput, ReservaUncheckedUpdateManyWithoutVooInput>
  }

  export type VooCreateWithoutReservasInput = {
    Destinos: DestinosCreateNestedOneWithoutVoosInput
    Aviao: AviaoCreateNestedOneWithoutVoosInput
  }

  export type VooUncheckedCreateWithoutReservasInput = {
    id?: number
    fk_Destinos_id: number
    fk_Aviao_id: number
  }

  export type VooCreateOrConnectWithoutReservasInput = {
    where: VooWhereUniqueInput
    create: XOR<VooCreateWithoutReservasInput, VooUncheckedCreateWithoutReservasInput>
  }

  export type PassageiroCreateWithoutReservasInput = {
    cpf: string
    Nome: string
  }

  export type PassageiroUncheckedCreateWithoutReservasInput = {
    cpf: string
    Nome: string
  }

  export type PassageiroCreateOrConnectWithoutReservasInput = {
    where: PassageiroWhereUniqueInput
    create: XOR<PassageiroCreateWithoutReservasInput, PassageiroUncheckedCreateWithoutReservasInput>
  }

  export type VooUpsertWithoutReservasInput = {
    update: XOR<VooUpdateWithoutReservasInput, VooUncheckedUpdateWithoutReservasInput>
    create: XOR<VooCreateWithoutReservasInput, VooUncheckedCreateWithoutReservasInput>
    where?: VooWhereInput
  }

  export type VooUpdateToOneWithWhereWithoutReservasInput = {
    where?: VooWhereInput
    data: XOR<VooUpdateWithoutReservasInput, VooUncheckedUpdateWithoutReservasInput>
  }

  export type VooUpdateWithoutReservasInput = {
    Destinos?: DestinosUpdateOneRequiredWithoutVoosNestedInput
    Aviao?: AviaoUpdateOneRequiredWithoutVoosNestedInput
  }

  export type VooUncheckedUpdateWithoutReservasInput = {
    id?: IntFieldUpdateOperationsInput | number
    fk_Destinos_id?: IntFieldUpdateOperationsInput | number
    fk_Aviao_id?: IntFieldUpdateOperationsInput | number
  }

  export type PassageiroUpsertWithoutReservasInput = {
    update: XOR<PassageiroUpdateWithoutReservasInput, PassageiroUncheckedUpdateWithoutReservasInput>
    create: XOR<PassageiroCreateWithoutReservasInput, PassageiroUncheckedCreateWithoutReservasInput>
    where?: PassageiroWhereInput
  }

  export type PassageiroUpdateToOneWithWhereWithoutReservasInput = {
    where?: PassageiroWhereInput
    data: XOR<PassageiroUpdateWithoutReservasInput, PassageiroUncheckedUpdateWithoutReservasInput>
  }

  export type PassageiroUpdateWithoutReservasInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
  }

  export type PassageiroUncheckedUpdateWithoutReservasInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioCreateManyAviaoInput = {
    cpf: string
    Nome: string
    cargo: string
  }

  export type VooCreateManyAviaoInput = {
    id?: number
    fk_Destinos_id: number
  }

  export type FuncionarioUpdateWithoutAviaoInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioUncheckedUpdateWithoutAviaoInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionarioUncheckedUpdateManyWithoutAviaoInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    Nome?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
  }

  export type VooUpdateWithoutAviaoInput = {
    Destinos?: DestinosUpdateOneRequiredWithoutVoosNestedInput
    Reservas?: ReservaUpdateManyWithoutVooNestedInput
  }

  export type VooUncheckedUpdateWithoutAviaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fk_Destinos_id?: IntFieldUpdateOperationsInput | number
    Reservas?: ReservaUncheckedUpdateManyWithoutVooNestedInput
  }

  export type VooUncheckedUpdateManyWithoutAviaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    fk_Destinos_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReservaCreateManyPassageiroInput = {
    fk_voo_id: number
  }

  export type ReservaUpdateWithoutPassageiroInput = {
    Voo?: VooUpdateOneRequiredWithoutReservasNestedInput
  }

  export type ReservaUncheckedUpdateWithoutPassageiroInput = {
    fk_voo_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReservaUncheckedUpdateManyWithoutPassageiroInput = {
    fk_voo_id?: IntFieldUpdateOperationsInput | number
  }

  export type VooCreateManyDestinosInput = {
    id?: number
    fk_Aviao_id: number
  }

  export type VooUpdateWithoutDestinosInput = {
    Aviao?: AviaoUpdateOneRequiredWithoutVoosNestedInput
    Reservas?: ReservaUpdateManyWithoutVooNestedInput
  }

  export type VooUncheckedUpdateWithoutDestinosInput = {
    id?: IntFieldUpdateOperationsInput | number
    fk_Aviao_id?: IntFieldUpdateOperationsInput | number
    Reservas?: ReservaUncheckedUpdateManyWithoutVooNestedInput
  }

  export type VooUncheckedUpdateManyWithoutDestinosInput = {
    id?: IntFieldUpdateOperationsInput | number
    fk_Aviao_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReservaCreateManyVooInput = {
    fk_passageiro_cpf: string
  }

  export type ReservaUpdateWithoutVooInput = {
    Passageiro?: PassageiroUpdateOneRequiredWithoutReservasNestedInput
  }

  export type ReservaUncheckedUpdateWithoutVooInput = {
    fk_passageiro_cpf?: StringFieldUpdateOperationsInput | string
  }

  export type ReservaUncheckedUpdateManyWithoutVooInput = {
    fk_passageiro_cpf?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AviaoCountOutputTypeDefaultArgs instead
     */
    export type AviaoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AviaoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassageiroCountOutputTypeDefaultArgs instead
     */
    export type PassageiroCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassageiroCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DestinosCountOutputTypeDefaultArgs instead
     */
    export type DestinosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DestinosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VooCountOutputTypeDefaultArgs instead
     */
    export type VooCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VooCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AviaoDefaultArgs instead
     */
    export type AviaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AviaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassageiroDefaultArgs instead
     */
    export type PassageiroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassageiroDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FuncionarioDefaultArgs instead
     */
    export type FuncionarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FuncionarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DestinosDefaultArgs instead
     */
    export type DestinosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DestinosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VooDefaultArgs instead
     */
    export type VooArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VooDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservaDefaultArgs instead
     */
    export type ReservaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}